<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xamarin.CommunityToolkit</name>
    </assembly>
    <members>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.CompoundAnimationBase">
            <summary>
            Represents a compound animation that can be used to animate multiple <see cref="T:Xamarin.Forms.View"/>s.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CompoundAnimationBase.IsRepeatedProperty">
            <summary>
            The <see cref="T:Xamarin.Forms.BindableProperty"/> backing store for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.CompoundAnimationBase.IsRepeated"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.CompoundAnimationBase.IsRepeated">
            <summary>
            Gets or sets a value indicating whether the animation will repeat.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.CompoundAnimationBase.Animate(Xamarin.Forms.View)">
            <inheritdoc />
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.CompoundAnimationBase.Animate(System.Nullable{System.Threading.CancellationToken},Xamarin.Forms.View[])">
            <summary>
            Runs the animation with the supplied parameters.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to allow for cancelling of the animation.</param>
            <param name="views">All <see cref="T:Xamarin.Forms.View"/>s to be animated.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.CompoundAnimationBase.CreateAnimation(Xamarin.Forms.View[])">
            <summary>
            Creates the animation ready for running.
            </summary>
            <param name="views">All <see cref="T:Xamarin.Forms.View"/>s to be animated.</param>
            <returns>The <see cref="T:Xamarin.Forms.Animation"/> that will be run.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.RubberBandAnimation">
            <summary>
            A 'Rubber band' animation. Results in:
            <list type="bullet">
            <item>stretching the width and squashing the height</item>
            <item>swapping to squash the width and stretch the height</item>
            <item>gradually swap until we reach 100% width and height again</item>
            </list>
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.RubberBandAnimation.DefaultDuration">
            <inheritdoc />
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.RubberBandAnimation.CreateAnimation(Xamarin.Forms.View[])">
            <inheritdoc />
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.TadaAnimation">
            <summary>
            A 'Tada' animation. Results in:
            <list type="bullet">
            <item>reducing the scale of the view(s)</item>
            <item>wobbling the view(s) while scaling up</item>
            <item>scaling back down to 100%</item>
            </list>
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.TadaAnimation.MaximumScaleProperty">
            <summary>
            The <see cref="T:Xamarin.Forms.BindableProperty"/> backing store for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.TadaAnimation.MaximumScale"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.TadaAnimation.MaximumScale">
            <summary>
            Gets or sets the maximum value the views will be scaled to during the animation.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.TadaAnimation.MinimumScaleProperty">
            <summary>
            The <see cref="T:Xamarin.Forms.BindableProperty"/> backing store for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.TadaAnimation.MinimumScale"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.TadaAnimation.MinimumScale">
            <summary>
            Gets or sets the minimum value the views will be scaled to during the animation.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.TadaAnimation.RotationAngleProperty">
            <summary>
            The <see cref="T:Xamarin.Forms.BindableProperty"/> backing store for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.TadaAnimation.RotationAngle"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.TadaAnimation.RotationAngle">
            <summary>
            Gets or sets the angle the views will be rotated by during the animation.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.TadaAnimation.DefaultDuration">
            <inheritdoc />
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.TadaAnimation.CreateAnimation(Xamarin.Forms.View[])">
            <inheritdoc />
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.AnimationWrapper.Abort">
            <summary>
            Stops the animation.
            </summary>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.AnimationWrapper.Commit">
            <summary>
            Runs the animation.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.AnimationWrapper.IsRunning">
            <summary>
            Gets a value indicating whether the animation is running.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.SetFocusOnEntryCompletedBehavior">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.Behaviors.SetFocusOnEntryCompletedBehavior"/> is an attached property for entries that allows the user to specify what <see cref="T:Xamarin.Forms.VisualElement"/> should gain focus after the user completes that entry.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.SetFocusOnEntryCompletedBehavior.NextElementProperty">
            <summary>
            The <see cref="F:Xamarin.CommunityToolkit.Behaviors.SetFocusOnEntryCompletedBehavior.NextElementProperty"/> attached property.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.SetFocusOnEntryCompletedBehavior.GetNextElement(Xamarin.Forms.BindableObject)">
            <summary>
            Required <see cref="M:Xamarin.CommunityToolkit.Behaviors.SetFocusOnEntryCompletedBehavior.GetNextElement(Xamarin.Forms.BindableObject)"/> accessor for <see cref="F:Xamarin.CommunityToolkit.Behaviors.SetFocusOnEntryCompletedBehavior.NextElementProperty"/> attached property.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.SetFocusOnEntryCompletedBehavior.SetNextElement(Xamarin.Forms.BindableObject,Xamarin.Forms.VisualElement)">
            <summary>
            Required <see cref="M:Xamarin.CommunityToolkit.Behaviors.SetFocusOnEntryCompletedBehavior.SetNextElement(Xamarin.Forms.BindableObject,Xamarin.Forms.VisualElement)"/> accessor for <see cref="F:Xamarin.CommunityToolkit.Behaviors.SetFocusOnEntryCompletedBehavior.NextElementProperty"/> attached property.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.Internals.BaseBehavior`1">
            <summary>
            Abstract class for our behaviors to inherit.
            </summary>
            <typeparam name="TView">The <see cref="T:Xamarin.Forms.VisualElement"/> that the behavior can be applied to</typeparam>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior"/> allows users to create custom validation behaviors. All of the validation behaviors in the Xamarin Community Toolkit inherit from this behavior, to expose a number of shared properties. Users can inherit from this class to create a custom validation behavior currently not supported through the Xamarin Community Toolkit. This behavios cannot be used directly as it's abstract.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.IsNotValidProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.IsNotValid"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.IsValidProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.IsValid"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.IsRunningProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.IsRunning"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.ValidStyleProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.ValidStyle"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.InvalidStyleProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.InvalidStyle"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.FlagsProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.Flags"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.ValueProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.Value"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.ValuePropertyNameProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.ValuePropertyName"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.ForceValidateCommandProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.ForceValidateCommand"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.IsValid">
            <summary>
            Indicates whether or not the current value is considered valid. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.IsRunning">
            <summary>
            Indicates whether or not the validation is in progress now (waiting for an asynchronous call is finished).
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.IsNotValid">
            <summary>
            Indicates whether or not the current value is considered not valid. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.ValidStyle">
            <summary>
            The <see cref="T:Xamarin.Forms.Style"/> to apply to the element when validation is successful. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.InvalidStyle">
            <summary>
            The <see cref="T:Xamarin.Forms.Style"/> to apply to the element when validation fails. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.Flags">
            <summary>
            Provides an enumerated value that specifies how to handle validation. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.Value">
            <summary>
            The value to validate. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.ValuePropertyName">
            <summary>
            Allows the user to override the property that will be used as the value to validate. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.ForceValidateCommand">
            <summary>
            Allows the user to provide a custom <see cref="T:System.Windows.Input.ICommand"/> that handles forcing validation. This is a bindable property.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.ForceValidate">
            <summary>
            Forces the behavior to make a validation pass.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior"/> is a behavior that allows the user to invoke a <see cref="T:System.Windows.Input.ICommand"/> through an event. It is designed to associate Commands to events exposed by controls that were not designed to support Commands. It allows you to map any arbitrary event on a control to a Command.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.EventNameProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.EventName"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.CommandProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.Command"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.CommandParameterProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.CommandParameter"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.EventArgsConverterProperty">
            <summary>
            Backing BindableProperty for the <see cref="T:System.EventArgs"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.EventName">
            <summary>
            The name of the event that should be associated with <see cref="P:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.Command"/>. This is bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.Command">
            <summary>
            The Command that should be executed when the event configured with <see cref="P:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.EventName"/> is triggered. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.CommandParameter">
            <summary>
            An optional parameter to forward to the <see cref="P:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.Command"/>. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.EventArgsConverter">
            <summary>
            An optional <see cref="T:Xamarin.Forms.IValueConverter"/> that can be used to convert <see cref="T:System.EventArgs"/> values, associated with the event configured with <see cref="P:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.EventName"/>, to values passed into the <see cref="P:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior.Command"/>. This is a bindable property.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior`1">
            <summary>
            This <see cref="T:Xamarin.CommunityToolkit.Behaviors.EventToCommandBehavior"/> cast the sender object to a specific type defined by the user.
            </summary>
            <typeparam name="TType">The type that you want to receive in your <see cref="T:Xamarin.Forms.Command"/> </typeparam>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.ImpliedOrderGridBehavior">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.Behaviors.ImpliedOrderGridBehavior"/> enables you to automatically assign a <see cref="T:Xamarin.Forms.Grid"/> row and column to a view based on the order the view is added to the <see cref="T:Xamarin.Forms.Grid"/>. You only need to setup the row and column definitions and then add children to the <see cref="T:Xamarin.Forms.Grid"/>. You may still assign RowSpan and ColumnSpan to views and their values will be taken into account when assigning a row and column to a view. If a view has a user defined row or column value it will be honored.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.ImpliedOrderGridBehavior.ThrowOnLayoutWarning">
            <summary>
            When set to true, warnings will throw an exception instead of being logged. Defaults to false.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.MaskedBehavior">
            <summary>
            The MaskedBehavior is a behavior that allows the user to define an input mask for data entry. Adding this behavior to an <see cref="T:Xamarin.Forms.InputView"/> (i.e. <see cref="T:Xamarin.Forms.Entry"/>) control will force the user to only input values matching a given mask. Examples of its usage include input of a credit card number or a phone number.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.MaskedBehavior.MaskProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.MaskedBehavior.Mask"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.MaskedBehavior.UnMaskedCharacterProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.MaskedBehavior.UnMaskedCharacter"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.MaskedBehavior.Mask">
            <summary>
            The mask that the input value needs to match. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.MaskedBehavior.UnMaskedCharacter">
            <summary>
            The placeholder character for when no input has been given yet. This is a bindable property.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior"/> is a behavior that allows the user to trigger an action when a user has reached the maximum length allowed on an <see cref="T:Xamarin.Forms.InputView"/>. It can either trigger a <see cref="T:System.Windows.Input.ICommand"/> or an event depending on the user's preferred scenario.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior.CommandProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior.Command"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior.Command">
            <summary>
            Command that is triggered when the value configured in <see cref="P:Xamarin.Forms.InputView.MaxLength" /> is reached. Both the <see cref="E:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior.MaxLengthReached"/> event and this command are triggered. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior.ShouldDismissKeyboardAutomaticallyProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior.ShouldDismissKeyboardAutomatically"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior.ShouldDismissKeyboardAutomatically">
            <summary>
            Indicates whether or not the keyboard should be dismissed automatically after the maximum length is reached. This is a bindable property.
            </summary>
        </member>
        <member name="E:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior.MaxLengthReached">
            <summary>
            Event that is triggered when the value configured in <see cref="P:Xamarin.Forms.InputView.MaxLength" /> is reached. Both the <see cref="P:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior.Command"/> and this event are triggered. This is a bindable property.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedEventArgs">
            <summary>
            Container object for the event arguments that are provided when the <see cref="E:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior.MaxLengthReached"/> event is triggered.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedEventArgs.Text">
            <summary>
            The new text value as determined by the <see cref="T:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior"/>
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedEventArgs.#ctor(System.String)">
            <summary>
            Constructor to create a new instance of <see cref="T:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedEventArgs"/>.
            </summary>
            <param name="text">The new text value as determined by the <see cref="T:Xamarin.CommunityToolkit.Behaviors.MaxLengthReachedBehavior"/></param>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.ProgressBarAnimationBehavior.AnimateProgressProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.ProgressBarAnimationBehavior.AnimateProgress"/> property.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior"/> is a behavior that allows the user to trigger an action when a user has stopped data input any <see cref="T:Xamarin.Forms.InputView"/> derivate like <see cref="T:Xamarin.Forms.Entry"/> or <see cref="T:Xamarin.Forms.SearchBar"/>. Examples of its usage include triggering a search when a user has stopped entering their search query.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.CommandProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.Command"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.CommandParameterProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.CommandParameter"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.StoppedTypingTimeThresholdProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.StoppedTypingTimeThreshold"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.MinimumLengthThresholdProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.MinimumLengthThreshold"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.ShouldDismissKeyboardAutomaticallyProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.ShouldDismissKeyboardAutomatically"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.Command">
            <summary>
            Command that is triggered when the <see cref="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.StoppedTypingTimeThreshold" /> is reached. When <see cref="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.MinimumLengthThreshold"/> is set, it's only triggered when both conditions are met. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.CommandParameter">
            <summary>
            An optional parameter to forward to the <see cref="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.Command"/>. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.StoppedTypingTimeThreshold">
            <summary>
            The time of inactivity in milliseconds after which <see cref="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.Command"/> will be executed. If <see cref="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.MinimumLengthThreshold"/> is also set, the condition there also needs to be met. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.MinimumLengthThreshold">
            <summary>
            The minimum length of the input value required before <see cref="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.Command"/> will be executed but only after <see cref="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.StoppedTypingTimeThreshold"/> has passed. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.UserStoppedTypingBehavior.ShouldDismissKeyboardAutomatically">
            <summary>
            Indicates whether or not the keyboard should be dismissed automatically after the user stopped typing. This is a bindable property.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior"/> is a behavior that allows the user to validate text input depending on specified parameters.For example, an <see cref="T:Xamarin.Forms.Entry"/> control can be styled differently depending on whether a valid or an invalid text value is provided. This behavior includes built-in checks such as checking for a certain number of digits or alphanumeric characters. Additional properties handling validation are inherited from <see cref="T:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior"/>.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior.CharacterTypeProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior.CharacterType"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior.MinimumCharacterCountProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior.MinimumCharacterCount"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior.MaximumCharacterCountProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior.MaximumCharacterCount"/> property.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior.#ctor">
            <summary>
            Constructor for this behavior
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior.CharacterType">
            <summary>
            Provides an enumerated value to use to set how to handle comparisons. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior.MinimumCharacterCount">
            <summary>
            The minimum length of the text input that's allowed. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior.MaximumCharacterCount">
            <summary>
            The maximum length of the text input that's allowed. This is a bindable property.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.CharacterType">
            <summary>
            The allowed character types used to determine if a value is valid in the <see cref="T:Xamarin.CommunityToolkit.Behaviors.CharactersValidationBehavior"/>. Since this is a flag, multiple flags cane be combined.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CharacterType.LowercaseLetter">
            <summary>Lowercase characters are allowed.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CharacterType.UppercaseLetter">
            <summary>Uppercase characters are allowed.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CharacterType.Letter">
            <summary>Either lowercase characters or uppercase characters are allowed.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CharacterType.Digit">
            <summary>Digits are allowed.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CharacterType.Alphanumeric">
            <summary>Characters and digits are allowed.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CharacterType.Whitespace">
            <summary>Whitespace is allowed.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CharacterType.NonAlphanumericSymbol">
            <summary>Non-alphanumeric symbols are allowed.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CharacterType.LowercaseLatinLetter">
            <summary>Lowercase latin characters are allowed.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CharacterType.UppercaseLatinLetter">
            <summary>Uppercase latin characters are allowed.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CharacterType.LatinLetter">
            <summary>Either latin lowercase characters or latin uppercase characters are allowed.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.CharacterType.Any">
            <summary>Any type of character or digit either lowercase or uppercase, latin or non-latin is allowed.</summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.EmailValidationBehavior">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.Behaviors.EmailValidationBehavior"/> is a behavior that allows users to determine whether or not text input is a valid e-mail address. For example, an <see cref="T:Xamarin.Forms.Entry"/> control can be styled differently depending on whether a valid or an invalid e-mail address is provided. The validation is achieved through a regular expression that is used to verify whether or not the text input is a valid e-mail address. It can be overridden to customize the validation through the properties it inherits from <see cref="T:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior"/> is a behavior that allows the user to combine multiple validators to validate text input depending on specified parameters. For example, an <see cref="T:Xamarin.Forms.Entry"/> control can be styled differently depending on whether a valid or an invalid text input is provided. By allowing the user to chain multiple existing validators together, it offers a high degree of customizability when it comes to validation. Additional properties handling validation are inherited from <see cref="T:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior"/>.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior.ErrorsProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior.Errors"/> property.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior.#ctor">
            <summary>
            Constructor for this behavior.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior.Errors">
            <summary>
            Holds the errors from all of the nested invalid validators in <see cref="P:Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior.Children"/>. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior.Children">
            <summary>
            All child behaviors that are part of this <see cref="T:Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior"/>. This is a bindable property.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior.GetError(Xamarin.Forms.BindableObject)">
            <summary>
            Method to extract the error from the attached property for a child behavior in <see cref="P:Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior.Children"/>.
            </summary>
            <param name="bindable">The <see cref="T:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior"/> that we extract the attached Error property</param>
            <returns>Object containing error information</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior.SetError(Xamarin.Forms.BindableObject,System.Object)">
            <summary>
            Method to set the error on the attached property for a child behavior in <see cref="P:Xamarin.CommunityToolkit.Behaviors.MultiValidationBehavior.Children"/>.
            </summary>
            <param name="bindable">The <see cref="T:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior"/> on which we set the attached Error property value</param>
            <param name="value">The value to set</param>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior"/> is a behavior that allows the user to determine if text input is a valid numeric value. For example, an <see cref="T:Xamarin.Forms.Entry"/> control can be styled differently depending on whether a valid or an invalid numeric input is provided. Additional properties handling validation are inherited from <see cref="T:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior"/>.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior.MinimumValueProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior.MinimumValue"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior.MaximumValueProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior.MaximumValue"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior.MinimumDecimalPlacesProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior.MinimumDecimalPlaces"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior.MaximumDecimalPlacesProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior.MaximumDecimalPlaces"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior.MinimumValue">
            <summary>
            The minimum numeric value that will be allowed. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior.MaximumValue">
            <summary>
            The maximum numeric value that will be allowed. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior.MinimumDecimalPlaces">
            <summary>
            The minimum number of decimal places that will be allowed. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.NumericValidationBehavior.MaximumDecimalPlaces">
            <summary>
            The maximum number of decimal places that will be allowed. This is a bindable property.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.RequiredStringValidationBehavior">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.Behaviors.RequiredStringValidationBehavior"/> is a behavior that allows the user to determine if text input is equal to specific text. For example, an <see cref="T:Xamarin.Forms.Entry"/> control can be styled differently depending on whether a valid or an invalid text input is provided. Additional properties handling validation are inherited from <see cref="T:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior"/>.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.RequiredStringValidationBehavior.RequiredStringProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.RequiredStringValidationBehavior.RequiredString"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.RequiredStringValidationBehavior.RequiredString">
            <summary>
            The string that will be compared to the value provided by the user. This is a bindable property.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.TextDecorationFlags">
            <summary>
            Flags to indicate what treatment <see cref="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.Value"/> should receive prior to validation with <see cref="T:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior"/> or subclasses. This can be used to trim or ignore whitespace for instance. This value might be ignored by a behavior if <see cref="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.Value"/> isn't of type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.TextDecorationFlags.None">
            <summary>No text decoration will be applied.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.TextDecorationFlags.TrimStart">
            <summary><see cref="M:System.String.TrimStart(System.Char[])"/> is applied on the value prior to validation.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.TextDecorationFlags.TrimEnd">
            <summary><see cref="M:System.String.TrimEnd(System.Char[])"/> is applied on the value prior to validation.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.TextDecorationFlags.Trim">
            <summary><see cref="M:System.String.Trim(System.Char[])"/> is applied on the value prior to validation.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.TextDecorationFlags.NullToEmpty">
            <summary>If <see cref="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.Value"/> is null, replace the value with <see cref="F:System.String.Empty"/></summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.TextDecorationFlags.NormalizeWhiteSpace">
            <summary>Excessive white space is removed from <see cref="P:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior.Value"/> prior to validation. I.e. I.e. "Hello    World" will become "Hello World". This applies to whitespace found anywhere.</summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior"/> is a behavior that allows the user to validate a given text depending on specified parameters. By adding this behavior to an <see cref="T:Xamarin.Forms.InputView"/> inherited control (i.e. <see cref="T:Xamarin.Forms.Entry"/>) it can be styled differently depending on whether a valid or an invalid text value is provided. It offers various built-in checks such as checking for a certain length or whether or not the input value matches a specific regular expression. Additional properties handling validation are inherited from <see cref="T:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior"/>.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.MinimumLengthProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.MinimumLength"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.MaximumLengthProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.MaximumLength"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.DecorationFlagsProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.DecorationFlags"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.RegexPatternProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.RegexPattern"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.RegexOptionsProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.RegexOptions"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.MinimumLength">
            <summary>
            The minimum length of the value that will be allowed. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.MaximumLength">
            <summary>
            The maximum length of the value that will be allowed. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.DecorationFlags">
            <summary>
            Provides enumerated value to use to set how to handle white spaces. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.RegexPattern">
            <summary>
            The regular expression pattern which the value will have to match before it will be allowed. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.RegexOptions">
            <summary>
            Provides enumerated values to use to set regular expression options. This is a bindable property.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Behaviors.TextValidationBehavior.#ctor">
            <summary>
            Constructor of this behavior.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Behaviors.UriValidationBehavior">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.Behaviors.UriValidationBehavior"/> is a behavior that allows users to determine whether or not text input is a valid URI. For example, an <see cref="T:Xamarin.Forms.Entry"/> control can be styled differently depending on whether a valid or an invalid URI is provided. Additional properties handling validation are inherited from <see cref="T:Xamarin.CommunityToolkit.Behaviors.Internals.ValidationBehavior"/>.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Behaviors.UriValidationBehavior.UriKindProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Behaviors.UriValidationBehavior.UriKind"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Behaviors.UriValidationBehavior.UriKind">
            <summary>
            Provides an enumerated value that specifies how to handle different URI types. This is a bindable property.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.BaseConverter`2">
            <summary>
            Abstract class used to implement converters that implements the ConvertBack logic.
            </summary>
            <typeparam name="TFrom">Type of the input value.</typeparam>
            <typeparam name="TTo">Type of the output value.</typeparam>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.BaseConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the incoming value from <see cref="!:TTo"/>[] and returns the object of a type <see cref="!:TFrom"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">Additional parameter for the converter to handle. This is not implemented.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>An object of the type <see cref="!:TFrom"/></returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.BaseConverter`2.ConvertBackTo(`1)">
            <summary>
            Method that will be called by <see cref="M:Xamarin.CommunityToolkit.Converters.BaseConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/>.
            </summary>
            <param name="value">Value to be converted from <see cref="!:TTo"/> to <see cref="!:TFrom"/>.</param>
            <returns>An object of type <see cref="!:TFrom"/>.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.BaseNullableConverter`2">
            <summary>
            Abstract class used to implement converters that supports null and implements the ConvertBack logic.
            </summary>
            <typeparam name="TFrom">Type of the input value.</typeparam>
            <typeparam name="TTo">Type of the output value.</typeparam>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.BaseNullableConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the incoming value from <see cref="!:TTo"/>[] and returns the object of a type <see cref="!:TFrom"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">Additional parameter for the converter to handle. This is not implemented.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>An object of the type <see cref="!:TFrom"/></returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.BaseNullableConverter`2.ConvertBackTo(`1)">
            <summary>
            Method that will be called by <see cref="M:Xamarin.CommunityToolkit.Converters.BaseNullableConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/>.
            </summary>
            <param name="value">Value to be converted from <see cref="!:TTo"/> to <see cref="!:TFrom"/>.</param>
            <returns>An object of type <see cref="!:TFrom"/>.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.BaseConverterOneWay`2">
            <summary>
            Abstract class used to implement converters that do not implement the ConvertBack logic.
            </summary>
            <typeparam name="TFrom">Type of the input value</typeparam>
            <typeparam name="TTo">Type of the output value</typeparam>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.BaseConverterOneWay`2.ConvertFrom(`0)">
            <summary>
            Method that will be called by <see cref="!:Convert(object, Type, object, CultureInfo)"/>.
            </summary>
            <param name="value">Value to be converted from <see cref="!:TFrom"/> to <see cref="!:TTo"/>.</param>
            <returns>An object of type <see cref="!:TTo"/>.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.BaseConverterOneWay`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented, use <see cref="T:Xamarin.CommunityToolkit.Converters.BaseConverter`2"/>
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.BaseConverterOneWay`2.Xamarin#Forms#IValueConverter#Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.BaseNullableConverterOneWay`2">
            <summary>
            Abstract class used to implement converters that support null and do not implement the ConvertBack logic.
            </summary>
            <typeparam name="TFrom">Type of the input value</typeparam>
            <typeparam name="TTo">Type of the output value</typeparam>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.BaseNullableConverterOneWay`2.ConvertFrom(`0)">
            <summary>
            Method that will be called by <see cref="!:Convert(object, Type, object, CultureInfo)"/>.
            </summary>
            <param name="value">Value to be converted from <see cref="!:TFrom"/> to <see cref="!:TTo"/>.</param>
            <returns>An object of type <see cref="!:TTo"/>.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.BaseNullableConverterOneWay`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented, use <see cref="T:Xamarin.CommunityToolkit.Converters.BaseConverter`2"/>
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.BaseNullableConverterOneWay`2.Xamarin#Forms#IValueConverter#Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.BoolToObjectConverter">
            <summary>
            Converts boolean to object and vice versa.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.BoolToObjectConverter`1">
            <summary>
            Converts <see cref="T:System.Boolean"/> to object and vice versa.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.BoolToObjectConverter`1.TrueObject">
            <summary>
            The object that corresponds to True value.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.BoolToObjectConverter`1.FalseObject">
            <summary>
            The object that corresponds to False value.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.BoolToObjectConverter`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts <see cref="T:System.Boolean"/> to object.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">Additional parameter for the converter to handle. This is not implemented.</param>
            <param name="culture">The culture to use in the converter.  This is not implemented.</param>
            <returns>The object assigned to <see cref="P:Xamarin.CommunityToolkit.Converters.BoolToObjectConverter`1.TrueObject"/> if value equals True, otherwise the value assigned to <see cref="P:Xamarin.CommunityToolkit.Converters.BoolToObjectConverter`1.FalseObject"/>.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.BoolToObjectConverter`1.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts back object to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">Additional parameter for the converter to handle. This is not implemented.</param>
            <param name="culture">The culture to use in the converter.  This is not implemented.</param>
            <returns>True if value equals <see cref="P:Xamarin.CommunityToolkit.Converters.BoolToObjectConverter`1.TrueObject"/>, otherwise False.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ByteArrayToImageSourceConverter">
            <summary>
            Converts the incoming value from <see cref="T:System.Byte"/>[] and returns the object of a type <see cref="T:Xamarin.Forms.ImageSource"/> or vice versa.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.ByteArrayToImageSourceConverter.ConvertBackTo(Xamarin.Forms.ImageSource)">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.StreamImageSource"/> and returns a <see cref="T:System.Byte"/>[].
            </summary>
            <param name="value">The value to convert.</param>
            <returns>An object of type <see cref="T:Xamarin.Forms.ImageSource"/>.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.ByteArrayToImageSourceConverter.ConvertFrom(System.Byte[])">
            <summary>
            Converts the incoming value from <see cref="T:System.Byte"/>[] and returns the object of a type <see cref="T:Xamarin.Forms.ImageSource"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>An object of type <see cref="T:Xamarin.Forms.ImageSource"/>.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToBlackOrWhiteConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:Xamarin.Forms.Color"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToColorForTextConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:Xamarin.Forms.Color"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToGrayScaleColorConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:Xamarin.Forms.Color"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToInverseColorConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:Xamarin.Forms.Color"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToByteAlphaConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToByteRedConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToByteGreenConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToByteBlueConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToPercentCyanConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToPercentMagentaConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToPercentYellowConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToBlackKeyConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToDegreeHueConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToRgbStringConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToRgbaStringConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToHexRgbStringConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.String"/> and virce-versa.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToHexRgbaStringConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.String"/> and virce-versa.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToCmykStringConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToCmykaStringConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToHslStringConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ColorToHslaStringConverter">
            <summary>
            Converts the incoming value from <see cref="T:Xamarin.Forms.Color"/> and returns the object of a type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.CompareConverter">
            <summary>
            Converts an object that implements IComparable to an object or a boolean based on a comparison.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.CompareConverter`1">
            <summary>
            Converts an object that implements IComparable to an object or a boolean based on a comparison.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.CompareConverter`1.ComparingValue">
            <summary>
            The comparing value.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.CompareConverter`1.ComparisonOperator">
            <summary>
            The comparison operator.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.CompareConverter`1.TrueObject">
            <summary>
            The object that corresponds to True value.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.CompareConverter`1.FalseObject">
            <summary>
            The object that corresponds to False value.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.CompareConverter`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an object that implements IComparable to a specified object or a boolean based on a comparaison result.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">Additional parameter for the converter to handle. This is not implemented.</param>
            <param name="culture">The culture to use in the converter.  This is not implemented.</param>
            <returns>The object assigned to <see cref="P:Xamarin.CommunityToolkit.Converters.CompareConverter`1.TrueObject"/> if (value <see cref="P:Xamarin.CommunityToolkit.Converters.CompareConverter`1.ComparisonOperator"/> <see cref="P:Xamarin.CommunityToolkit.Converters.CompareConverter`1.ComparingValue"/>) equals True and <see cref="P:Xamarin.CommunityToolkit.Converters.CompareConverter`1.TrueObject"/> is not null, if <see cref="P:Xamarin.CommunityToolkit.Converters.CompareConverter`1.TrueObject"/> is null it returns true, otherwise the value assigned to <see cref="P:Xamarin.CommunityToolkit.Converters.CompareConverter`1.FalseObject"/>, if no value is assigned then it returns false.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.CompareConverter`1.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented and will throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">N/A</param>
            <param name="targetType">N/A</param>
            <param name="parameter">N/A</param>
            <param name="culture">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.DateTimeOffsetConverter">
            <summary>
            Converts <see cref="T:System.DateTimeOffset"/> to <see cref="T:System.DateTime"/> and back.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.DateTimeOffsetConverter.ConvertBackTo(System.DateTime)">
            <summary>
            Converts <see cref="T:System.DateTime"/> back to <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The <see cref="T:System.DateTimeOffset"/> value.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.DateTimeOffsetConverter.ConvertFrom(System.DateTimeOffset)">
            <summary>
            Converts <see cref="T:System.DateTimeOffset"/> to <see cref="T:System.DateTime"/>
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The <see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.DoubleToIntConverter">
            <summary>
            Converts <see cref="T:System.Double"/> to <see cref="T:System.Int32"/> and vice versa.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.DoubleToIntConverter.Ratio">
            <summary>
            Multiplier / Denominator (Equals 1 by default).
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.DoubleToIntConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts <see cref="T:System.Double"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value"><see cref="T:System.Double"/> value.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">Multiplier (Equals 1 by default).</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns><see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.DoubleToIntConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts back <see cref="T:System.Int32"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">Integer value.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">Denominator (Equals 1 by default).</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns><see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.EnumToBoolConverter">
            <summary>
                Convert an <see cref="T:System.Enum" /> to corresponding <see cref="T:System.Boolean" />
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.EnumToBoolConverter.TrueValues">
            <summary>
                Enum values, that converts to <c>true</c> (optional)
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.EnumToBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
                Convert an <see cref="T:System.Enum" /> to corresponding <see cref="T:System.Boolean" />
            </summary>
            <param name="value"><see cref="T:System.Enum" /> value to convert</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">
                Additional parameter for converter. Can be used for comparison instead of
                <see cref="P:Xamarin.CommunityToolkit.Converters.EnumToBoolConverter.TrueValues" />
            </param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>
                False, if the value is not in <see cref="P:Xamarin.CommunityToolkit.Converters.EnumToBoolConverter.TrueValues" />. False, if <see cref="P:Xamarin.CommunityToolkit.Converters.EnumToBoolConverter.TrueValues" /> is empty and
                value not equal to parameter.
            </returns>
            <exception cref="T:System.ArgumentException">If value is not an <see cref="T:System.Enum" /></exception>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.EnumToBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented and will throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">N/A</param>
            <param name="targetType">N/A</param>
            <param name="parameter">N/A</param>
            <param name="culture">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.EnumToIntConverter">
            <summary>
                Converts an <see cref="T:System.Enum" /> to its underlying <see cref="T:System.Int32" /> value.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.EnumToIntConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a default <see cref="T:System.Enum"/> (i.e., extending <see cref="T:System.Int32"/>) to corresponding underlying <see cref="T:System.Int32"/>
            </summary>
            <param name="value"><see cref="T:System.Enum"/> value to convert</param>
            <param name="targetType">Unused: type of the binding target property</param>
            <param name="parameter">Unused: Additional parameter for converter</param>
            <param name="culture">Unused: Culture to use in the converter</param>
            <returns>The underlying <see cref="T:System.Int32"/> value of the passed enum value</returns>
            <exception cref="T:System.ArgumentException">If value is not an enumeration type</exception>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.EnumToIntConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the <see cref="T:System.Enum"/> associated with the specified <see cref="T:System.Int32"/> value defined in the targetType
            </summary>
            <param name="value"><see cref="T:System.Enum"/> value to convert</param>
            <param name="targetType">The type of the binding target property. Expected to be an enum.</param>
            <param name="parameter">Unused: Additional parameter for converter</param>
            <param name="culture">Unused: Culture to use in the converter</param>
            <returns>The underlying <see cref="T:System.Enum"/> of the associated targetType</returns>
            <exception cref="T:System.ArgumentException">If value is not a valid value in the targetType enum</exception>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.EqualConverter">
            <summary>
            Checks whether the incoming value equals the provided parameter.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.EqualConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Checks whether the incoming value doesn't equal the provided parameter.
            </summary>
            <param name="value">The first object to compare.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">The second object to compare.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>True if <paramref name="value"/> and <paramref name="parameter"/> are equal, False if they are not equal.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.EqualConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented and will throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">N/A</param>
            <param name="targetType">N/A</param>
            <param name="parameter">N/A</param>
            <param name="culture">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ImageResourceConverter">
            <summary>
            Converts embedded image resource ID to it ImageSource.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.ImageResourceConverter.ConvertFrom(System.String)">
            <summary>
            Converts embedded image resource ID to it ImageSource.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The ImageSource related to the provided resource ID of the embedded image. If it's null it will returns null.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.IndexToArrayItemConverter">
            <summary>
            Converts an <see cref="T:System.Int32"/> index to corresponding array item and vice versa.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.IndexToArrayItemConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an <see cref="T:System.Int32"/> index to corresponding array item.
            </summary>
            <param name="value">The index of items array.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">The items array.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>The item from the array that corresponds to passed index.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.IndexToArrayItemConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts back an array item to corresponding index of the item in the array.
            </summary>
            <param name="value">The item from the array.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">The items array.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>The index of the item from the array.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.IntToBoolConverter">
            <summary>
            Converts an <see cref="T:System.Int32"/> to corresponding <see cref="T:System.Boolean"/> and vice versa.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.IntToBoolConverter.ConvertBackTo(System.Boolean)">
            <summary>
            Converts back <see cref="T:System.Boolean"/> to corresponding <see cref="T:System.Int32"/>.
            </summary>
            <param name="value"><see cref="T:System.Boolean"/> value.</param>
            <returns>0 if the value is False, otherwise 1 if the value is True.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.IntToBoolConverter.ConvertFrom(System.Int32)">
            <summary>
            Converts an <see cref="T:System.Int32"/> to corresponding <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value"><see cref="T:System.Int32"/> value.</param>
            <returns>False if the value is 0, otherwise if the value is anything but 0 it returns True.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.InvertedBoolConverter">
            <summary>
            Converts true to false and false to true. Simple as that!
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.InvertedBoolConverter.ConvertBackTo(System.Boolean)">
            <summary>
            Converts a <see cref="T:System.Boolean"/> to its inverse value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>An inverted <see cref="T:System.Boolean"/> from the one coming in.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.InvertedBoolConverter.ConvertFrom(System.Boolean)">
            <summary>
            Converts a <see cref="T:System.Boolean"/> to its inverse value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>An inverted <see cref="T:System.Boolean"/> from the one coming in.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.IsInRangeConverter">
            <summary>
            Checks if the value is between minValue and maxValue, returning true if the value is within the range and false if the value is out of the range.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Converters.IsInRangeConverter.MinValueProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Converters.IsInRangeConverter.MinValue"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Converters.IsInRangeConverter.MaxValueProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Converters.IsInRangeConverter.MaxValue"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.IsInRangeConverter.MinValue">
            <summary>
            Gets or sets the minimum value of the range for the <see cref="T:Xamarin.CommunityToolkit.Converters.IsInRangeConverter"/>. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.IsInRangeConverter.MaxValue">
            <summary>
            Gets or sets the maximum value of the range for the <see cref="T:Xamarin.CommunityToolkit.Converters.IsInRangeConverter"/>. This is a bindable property.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.IsInRangeConverter.ConvertFrom(System.IComparable)">
            <summary>
            Checks if the value is between minValue and maxValue, returning true if the value is within the range and false if the value is out of the range.
            </summary>
            <param name="value">The object to compare.</param>
            <returns>True if <paramref name="value"/> and <paramref name="parameter"/> are equal, False if they are not equal.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.IsNotNullOrEmptyConverter">
            <summary>
            Converts the incoming value to a <see cref="T:System.Boolean"/> indicating whether or not the value is not null and not empty.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.IsNotNullOrEmptyConverter.ConvertFrom(System.Object)">
            <summary>
            Converts the incoming value to a <see cref="T:System.Boolean"/> indicating whether or not the value is not null and not empty.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the incoming value is not null and not empty.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.IsNullOrEmptyConverter">
            <summary>
            Converts the incoming value to a <see cref="T:System.Boolean"/> indicating whether or not the value is null or empty.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.IsNullOrEmptyConverter.ConvertFrom(System.Object)">
            <summary>
            Converts the incoming value to a <see cref="T:System.Boolean"/> indicating whether or not the value is null or empty.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the incoming value is null or empty.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ItemSelectedEventArgsConverter">
            <summary>
            Converts/Extracts the incoming value from <see cref="T:Xamarin.Forms.SelectedItemChangedEventArgs"/> object and returns the value of <see cref="P:Xamarin.Forms.SelectedItemChangedEventArgs.SelectedItem"/> property from it.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.ItemSelectedEventArgsConverter.ConvertFrom(Xamarin.Forms.SelectedItemChangedEventArgs)">
            <summary>
            Converts/Extracts the incoming value from <see cref="T:Xamarin.Forms.SelectedItemChangedEventArgs"/> object and returns the value of <see cref="P:Xamarin.Forms.SelectedItemChangedEventArgs.SelectedItem"/> property from it.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="P:Xamarin.Forms.SelectedItemChangedEventArgs.SelectedItem"/> object from object of type <see cref="T:Xamarin.Forms.SelectedItemChangedEventArgs"/>.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ItemTappedEventArgsConverter">
            <summary>
            Converts/Extracts the incoming value from <see cref="T:Xamarin.Forms.ItemTappedEventArgs"/> object and returns the value of <see cref="P:Xamarin.Forms.ItemTappedEventArgs.Item"/> property from it.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.ItemTappedEventArgsConverter.ConvertFrom(Xamarin.Forms.ItemTappedEventArgs)">
            <summary>
            Converts/Extracts the incoming value from <see cref="T:Xamarin.Forms.ItemTappedEventArgs"/> object and returns the value of <see cref="P:Xamarin.Forms.ItemTappedEventArgs.Item"/> property from it.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="P:Xamarin.Forms.ItemTappedEventArgs.Item"/> object from object of type <see cref="T:Xamarin.Forms.ItemTappedEventArgs"/>.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ListIsNotNullOrEmptyConverter">
            <summary>
            Converts the incoming value to a <see cref="T:System.Boolean"/> indicating whether or not the value is not null and not empty.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.ListIsNotNullOrEmptyConverter.ConvertFrom(System.Collections.IEnumerable)">
            <summary>
            Converts the incoming value to a <see cref="T:System.Boolean"/> indicating whether or not the value is not null and not empty.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the incoming value is not null and not empty.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ListIsNullOrEmptyConverter">
            <summary>
            Converts the incoming value to a <see cref="T:System.Boolean"/> indicating whether or not the value is null or empty.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.ListIsNullOrEmptyConverter.ConvertFrom(System.Collections.IEnumerable)">
            <summary>
            Converts the incoming value to a <see cref="T:System.Boolean"/> indicating whether or not the value is null or empty.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating if the incoming value is null or empty.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.ListToStringConverter">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.ListToStringConverter.Separator">
            <summary>
            The separator that should be between each item in the collection
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.ListToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Concatenates the items of a collection, using the specified <see cref="P:Xamarin.CommunityToolkit.Converters.ListToStringConverter.Separator"/> between each item. On each item ToString() will be called.
            </summary>
            <param name="value">The collection to convert.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">The separator that should be between each collection item. This overrides the value in <see cref="P:Xamarin.CommunityToolkit.Converters.ListToStringConverter.Separator"/>.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>Concatenated members string separated by <see cref="P:Xamarin.CommunityToolkit.Converters.ListToStringConverter.Separator"/> or, if set, <paramref name="parameter"/>.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.ListToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented and will throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">N/A</param>
            <param name="targetType">N/A</param>
            <param name="parameter">N/A</param>
            <param name="culture">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.MathExpressionConverter.Expression">
            <summary>
            The expression to calculate.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.MathExpressionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Calculate the incoming expression string with one variable.
            </summary>
            <param name="value">The variable X for an expression</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">The expression to calculate.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>A <see cref="T:System.Double"/> The result of calculating an expression.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.MathExpressionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented and will throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">N/A</param>
            <param name="targetType">N/A</param>
            <param name="parameter">N/A</param>
            <param name="culture">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.MultiMathExpressionConverter.Expression">
            <summary>
            The expression to calculate.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.MultiMathExpressionConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Calculate the incoming expression string with variables.
            </summary>
            <param name="values">The array of variables for an expression</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">The expression to calculate.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>A <see cref="T:System.Double"/> The result of calculating an expression.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.MultiMathExpressionConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented and will throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">N/A</param>
            <param name="targetTypes">N/A</param>
            <param name="parameter">N/A</param>
            <param name="culture">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.MultiConverter">
            <summary>
            Converts an incoming value using all of the incoming converters in sequence.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.MultiConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Uses the incoming converters to convert the value.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">Parameter to pass into subsequent converters.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.MultiConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented and will throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">N/A</param>
            <param name="targetType">N/A</param>
            <param name="parameter">N/A</param>
            <param name="culture">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.MultiConverterParameter">
            <summary>
            Represents a parameter to be used in the <see cref="T:Xamarin.CommunityToolkit.Converters.MultiConverter"/>.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.MultiConverterParameter.ConverterType">
            <summary>
            The type of object of this parameter.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.MultiConverterParameter.Value">
            <summary>
            The value of this parameter.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.NotEqualConverter">
            <summary>
            Checks whether the incoming value doesn't equal the provided parameter.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.NotEqualConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Checks whether the incoming value doesn't equal the provided parameter.
            </summary>
            <param name="value">The first object to compare.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">The second object to compare.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>True if <paramref name="value"/> and <paramref name="parameter"/> are not equal, False if they are equal.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.NotEqualConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented and will throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">N/A</param>
            <param name="targetType">N/A</param>
            <param name="parameter">N/A</param>
            <param name="culture">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.StateToBooleanConverter">
            <summary>
            This converter can be used with <see cref="T:Xamarin.CommunityToolkit.UI.Views.StateLayout"/> to determine if a certain state is visible. This can be useful, for instance, in scenarios where you want to show/hide certain elements based on the current <see cref="T:Xamarin.CommunityToolkit.UI.Views.StateLayout"/>.CurrentState. Additionally a <see cref="T:Xamarin.CommunityToolkit.UI.Views.StateLayout"/> can be supplied in the parameter of the Convert method to compare against that.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.StateToBooleanConverter.StateToCompare">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.UI.Views.LayoutState"/> to compare to.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.StateToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Takes the incoming <see cref="T:Xamarin.CommunityToolkit.UI.Views.StateLayout"/> in <paramref name="value"/> and compares it to <see cref="P:Xamarin.CommunityToolkit.Converters.StateToBooleanConverter.StateToCompare"/>. If they are equal it returns True, if they are not equal it returns False. Additionally a state to compare against can be provided in <paramref name="parameter"/>.
            </summary>
            <param name="value">The <see cref="T:Xamarin.CommunityToolkit.UI.Views.StateLayout"/> to compare.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">Optionally, a <see cref="T:Xamarin.CommunityToolkit.UI.Views.StateLayout"/> can be supplied here to compare against.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>True if the provided <see cref="T:Xamarin.CommunityToolkit.UI.Views.StateLayout"/>s match, otherwise False if they don't match.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.StateToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented and will throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">N/A</param>
            <param name="targetType">N/A</param>
            <param name="parameter">N/A</param>
            <param name="culture">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.StringToListConverter">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited by <see cref="P:Xamarin.CommunityToolkit.Converters.StringToListConverter.Separator"/>.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.StringToListConverter.Separator">
            <summary>
            The string that delimits the substrings in this string.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.StringToListConverter.Separators">
            <summary>
            The strings that delimits the substrings in this string.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.StringToListConverter.SplitOptions">
            <summary>
            A bitwise combination of the enumeration values that specifies whether to trim substrings and include empty substrings.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.StringToListConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited by <see cref="P:Xamarin.CommunityToolkit.Converters.StringToListConverter.Separators"/>.
            </summary>
            <param name="value">The string to split.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">The string or strings that delimits the substrings in this string. This overrides the value in <see cref="P:Xamarin.CommunityToolkit.Converters.StringToListConverter.Separator"/> and <see cref="P:Xamarin.CommunityToolkit.Converters.StringToListConverter.Separators"/>.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>An array whose elements contain the substrings in this string that are delimited by <see cref="P:Xamarin.CommunityToolkit.Converters.StringToListConverter.Separator"/> or, if set, <see cref="P:Xamarin.CommunityToolkit.Converters.StringToListConverter.Separators"/> or, if set, <paramref name="parameter"/>.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.StringToListConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented and will throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">N/A</param>
            <param name="targetType">N/A</param>
            <param name="parameter">N/A</param>
            <param name="culture">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.TextCaseConverter">
            <summary>
            Converts text (string, char) to certain case as specified with <see cref="P:Xamarin.CommunityToolkit.Converters.TextCaseConverter.Type"/> or the parameter of the Convert method.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.TextCaseConverter.Type">
            <summary>
            The desired text case that the text should be converted to.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.TextCaseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts text (string, char) to certain case.
            </summary>
            <param name="value">The text to convert.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">The desired text case that the text should be converted to. Must match <see cref="T:Xamarin.CommunityToolkit.Converters.TextCaseType"/> enum value.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>The converted text representation with the desired casing.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.TextCaseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented and will throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">N/A</param>
            <param name="targetType">N/A</param>
            <param name="parameter">N/A</param>
            <param name="culture">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.TextCaseType">
            <summary>
            The text cases that can be used with <see cref="T:Xamarin.CommunityToolkit.Converters.TextCaseConverter"/> to convert text to a specific case.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Converters.TextCaseType.None">
            <summary>Should not be converted</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Converters.TextCaseType.Upper">
            <summary>Convert to uppercase</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Converters.TextCaseType.Lower">
            <summary>Convert to lowercase</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Converters.TextCaseType.FirstUpperRestLower">
            <summary>Converts the first letter to upper only</summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.TimeSpanToDoubleConverter">
            <summary>
            Converts a <see cref="T:System.TimeSpan"/> to a <see cref="T:System.Double"/> value expressed in seconds.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.TimeSpanToDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:System.TimeSpan"/> to a <see cref="T:System.Double"/> value expressed in seconds.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to convert.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">Additional parameter for the converter to handle. This is not implemented.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>A <see cref="T:System.Double"/> value expressed in seconds.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.TimeSpanToDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:System.Double"/> (value should be in seconds) to a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value (in seconds) to convert.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">Additional parameter for the converter to handle. This is not implemented.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>The <see cref="T:System.TimeSpan"/> value representing the converted <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.UtcDateTimeToLocalStringConverter">
            <summary>
            Converts the incoming value to a <see cref="T:System.String"/> local time represenation in the
            datetime format provided.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Converters.UtcDateTimeToLocalStringConverter.DateTimeFormatProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.Converters.UtcDateTimeToLocalStringConverter.DateTimeFormat"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.UtcDateTimeToLocalStringConverter.DateTimeFormat">
            <summary>
            Gets or sets the datetime format value of the provided datetime or datetimeoffset for
            the <see cref="T:Xamarin.CommunityToolkit.Converters.UtcDateTimeToLocalStringConverter"/>. This is a bindable property.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.UtcDateTimeToLocalStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented and will throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">N/A</param>
            <param name="targetType">N/A</param>
            <param name="parameter">N/A</param>
            <param name="culture">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Converters.VariableMultiValueConverter">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.Converters.VariableMultiValueConverter"/> is a converter that allows users to convert multiple <see cref="T:System.Boolean"/> value bindings to a single <see cref="T:System.Boolean"/>. It does this by enabling them to specify whether All, Any, None or a specific number of values are true as specified in <see cref="P:Xamarin.CommunityToolkit.Converters.VariableMultiValueConverter.ConditionType"/>. This is useful when combined with the <see cref="T:Xamarin.Forms.MultiBinding"/>.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.VariableMultiValueConverter.ConditionType">
            <summary>
            Indicates how many values should be true out of the provided boolean values in the <see cref="T:Xamarin.Forms.MultiBinding"/>. Supports the following values: All, None, Any, GreaterThan, LessThan.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Converters.VariableMultiValueConverter.Count">
            <summary>
            The number of values that should be true when using <see cref="P:Xamarin.CommunityToolkit.Converters.VariableMultiValueConverter.ConditionType"/> GreaterThan, LessThan or Exact.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.VariableMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts multiple <see cref="T:System.Boolean"/> value bindings to a single <see cref="T:System.Boolean"/>. It does this by enabling them to specify whether All, Any, None or a specific number of values are true as specified in <see cref="P:Xamarin.CommunityToolkit.Converters.VariableMultiValueConverter.ConditionType"/>. This is useful when combined with the <see cref="T:Xamarin.Forms.MultiBinding"/>.
            </summary>
            <param name="values">The values (of type <see cref="T:System.Boolean"/>) that should be converted.</param>
            <param name="targetType">The type of the binding target property. This is not implemented.</param>
            <param name="parameter">Additional parameter for the converter to handle. This is not implemented.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>A single <see cref="T:System.Boolean"/> value dependant on the configuration for this converter.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Converters.VariableMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts one <see cref="T:System.Boolean"/> value. Returns null if <paramref name="value"/> is not a <see cref="T:System.Boolean"/> value or when not all <paramref name="targetTypes"/> can be assigned from <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value that should be converted.</param>
            <param name="targetTypes">The types of the binding target properties.</param>
            <param name="parameter">Additional parameter for the converter to handle. This is not implemented.</param>
            <param name="culture">The culture to use in the converter. This is not implemented.</param>
            <returns>All bindings that evaluate to true if <paramref name="value"/> is true. Or null if <paramref name="value"/> is not a <see cref="T:System.Boolean"/> value or <paramref name="value"/> is false.</returns>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Effects.EffectIds.effectResolutionGroupName">
            <summary>
            The Base Resolution Group Name For Effects
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Effects.EffectIds.RemoveBorder">
            <summary>
            Effect Id for <see cref="T:Xamarin.CommunityToolkit.Effects.RemoveBorderEffect"/>
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Effects.EffectIds.SelectAllText">
            <summary>
            Effect Id for <see cref="T:Xamarin.CommunityToolkit.Effects.SelectAllTextEffect"/>
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Effects.EffectIds.SafeArea">
            <summary>
            Effect Id for <see cref="T:Xamarin.CommunityToolkit.Effects.SafeAreaEffect"/>
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Effects.EffectIds.IconTintColor">
            <summary>
            Effect Id for <see cref="T:Xamarin.CommunityToolkit.Effects.IconTintColorEffect"/>
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Effects.EffectIds.VisualFeedback">
            <summary>
            Effect Id for <see cref="T:Xamarin.CommunityToolkit.Effects.VisualFeedbackEffect"/>
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Effects.EffectIds.TouchEffect">
            <summary>
            Effect Id for <see cref="P:Xamarin.CommunityToolkit.Effects.EffectIds.TouchEffect"/>
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Effects.EffectIds.LifeCycleEffect">
            <summary>
            Effect Id for <see cref="P:Xamarin.CommunityToolkit.Effects.EffectIds.LifeCycleEffect"/>
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Effects.EffectIds.ShadowEffect">
            <summary>
            Effect Id for <see cref="P:Xamarin.CommunityToolkit.Effects.EffectIds.ShadowEffect"/>
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Effects.EffectIds.Semantic">
            <summary>
            Effect Id for <see cref="T:Xamarin.CommunityToolkit.Effects.SemanticEffect"/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Xamarin.CommunityToolkit.Effects.EffectIds.StatusBar" -->
        <member name="P:Xamarin.CommunityToolkit.Effects.EffectIds.NavigationBar">
            <summary>
            Effect Id for <see cref="T:Xamarin.CommunityToolkit.PlatformConfiguration.AndroidSpecific.NavigationBarEffect"/>
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Effects.LifecycleEffect">
            <summary>
            An effect to subscribe to the View's lifecycle events.
            </summary>
        </member>
        <member name="E:Xamarin.CommunityToolkit.Effects.LifecycleEffect.Loaded">
            <summary>
            Event that is triggered when the <see cref="T:Xamarin.Forms.View" /> is loaded and is ready for use.
            </summary>
        </member>
        <member name="E:Xamarin.CommunityToolkit.Effects.LifecycleEffect.Unloaded">
            <summary>
            Event that is triggered when the <see cref="T:Xamarin.Forms.View" /> is unloaded and isn't ready for use.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Effects.LifecycleEffect.#ctor">
            <summary>
            Constructor for the <see cref="T:Xamarin.CommunityToolkit.Effects.LifecycleEffect" />
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Exceptions.InvalidCommandParameterException">
            <summary>
            Represents errors that occur during IAsyncCommand execution.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Exceptions.InvalidCommandParameterException.#ctor(System.Type,System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xamarin.CommunityToolkit.Exceptions.InvalidCommandParameterException"/> class.
            </summary>
            <param name="expectedType">Expected parameter type for AsyncCommand.Execute.</param>
            <param name="actualType">Actual parameter type for AsyncCommand.Execute.</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Exceptions.InvalidCommandParameterException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xamarin.CommunityToolkit.Exceptions.InvalidCommandParameterException"/> class.
            </summary>
            <param name="expectedType">Expected parameter type for AsyncCommand.Execute.</param>
            <param name="actualType">Actual parameter type for AsyncCommand.Execute.</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Exceptions.InvalidCommandParameterException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xamarin.CommunityToolkit.Exceptions.InvalidCommandParameterException"/> class.
            </summary>
            <param name="expectedType">Expected parameter type for AsyncCommand.Execute.</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Exceptions.InvalidCommandParameterException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xamarin.CommunityToolkit.Exceptions.InvalidCommandParameterException"/> class.
            </summary>
            <param name="expectedType">Expected parameter type for AsyncCommand.Execute.</param>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Exceptions.InvalidHandleEventException">
            <summary>
            Represents errors that occur during WeakEventManager.HandleEvent execution.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Exceptions.InvalidHandleEventException.#ctor(System.String,System.Reflection.TargetParameterCountException)">
            <summary>
            Initializes a new instance of the <see cref="T:Xamarin.CommunityToolkit.Exceptions.InvalidHandleEventException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="targetParameterCountException">Target parameter count exception.</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.ColorExtension.ToRgbString(Xamarin.Forms.Color)">
            <returns>RGB(255, 255, 255)</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.ColorExtension.ToRgbaString(Xamarin.Forms.Color)">
            <returns>RGBA(255, 255, 255, 255)</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.ColorExtension.ToHexRgbString(Xamarin.Forms.Color)">
            <returns>#FFFFFF</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.ColorExtension.ToHexRgbaString(Xamarin.Forms.Color)">
            <returns>#FFFFFFFF</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.ColorExtension.ToCmykString(Xamarin.Forms.Color)">
            <returns>CMYK(100%,100%,100%,100%)</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.ColorExtension.ToCmykaString(Xamarin.Forms.Color)">
            <returns>CMYK(100%,100%,100%,100%,100%)</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.ColorExtension.ToHslString(Xamarin.Forms.Color)">
            <returns>HSLA(360,100%,100%)</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.ColorExtension.ToHslaString(Xamarin.Forms.Color)">
            <returns>HSLA(360°,100%,100%,100%)</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Extensions.ImageResourceExtension">
            <summary>
            Provides ImageSource by Resource Id from the current app's assembly.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.Extensions.ImageResourceExtension.Id">
            <summary>
            The Resource Id of the image.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Extensions.NavigableElementExtensions">
            <summary>
            Extension methods for <see cref="T:Xamarin.Forms.NavigableElement"/>
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.NavigableElementExtensions.ShowPopup(Xamarin.Forms.NavigableElement,Xamarin.CommunityToolkit.UI.Views.BasePopup)">
            <summary>
            Displays a popup.
            </summary>
            <param name="element">
            The current <see cref="T:Xamarin.Forms.NavigableElement"/> that has a valid <see cref="T:Xamarin.Forms.INavigation"/>.
            </param>
            <param name="popup">
            The <see cref="T:Xamarin.CommunityToolkit.UI.Views.BasePopup"/> to display.
            </param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.NavigableElementExtensions.ShowPopupAsync``1(Xamarin.Forms.NavigableElement,Xamarin.CommunityToolkit.UI.Views.Popup{``0})">
            <summary>
            Displays a poup and returns a result.
            </summary>
            <typeparam name="T">
            The <typeparamref name="T"/> result that is returned when the popup is dismissed.
            </typeparam>
            <param name="element">
            The current <see cref="T:Xamarin.Forms.NavigableElement"/> that has a valid <see cref="T:Xamarin.Forms.INavigation"/>.
            </param>
            <param name="popup">
            The <see cref="T:Xamarin.CommunityToolkit.UI.Views.Popup`1"/> to display.
            </param>
            <returns>
            A task that will complete once the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Popup`1"/> is dismissed.
            </returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Extensions.NavigationExtensions">
            <summary>
            Extension methods for <see cref="T:Xamarin.Forms.INavigation"/>.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.NavigationExtensions.ShowPopup(Xamarin.Forms.INavigation,Xamarin.CommunityToolkit.UI.Views.BasePopup)">
            <summary>
            Displays a popup.
            </summary>
            <param name="navigation">
            The current <see cref="T:Xamarin.Forms.INavigation"/>.
            </param>
            <param name="popup">
            The <see cref="T:Xamarin.CommunityToolkit.UI.Views.BasePopup"/> to display.
            </param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.NavigationExtensions.ShowPopupAsync``1(Xamarin.Forms.INavigation,Xamarin.CommunityToolkit.UI.Views.Popup{``0})">
            <summary>
            Displays a popup and returns a result.
            </summary>
            <typeparam name="T">
            The <typeparamref name="T"/> result that is returned when the popup is dismissed.
            </typeparam>
            <param name="navigation">
            The current <see cref="T:Xamarin.Forms.INavigation"/>.
            </param>
            <param name="popup">
            The <see cref="T:Xamarin.CommunityToolkit.UI.Views.Popup`1"/> to display.
            </param>
            <returns>
            A task that will complete once the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Popup`1"/> is dismissed.
            </returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.SemanticExtensions.SetSemanticFocus(Xamarin.Forms.VisualElement)">
            <summary>
            Force semantic screen reader focus to specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.TaskExtensions.WhenCanceled(System.Threading.CancellationToken)">
            <summary>
            Provides a mechanism to await until the supplied <paramref name="cancellationToken"/> has been cancelled.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to await.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Extensions.VisualElementExtension">
            <summary>
            Extension methods for <see cref="T:Xamarin.Forms.VisualElement"/>.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.VisualElementExtension.DisplayToastAsync(Xamarin.Forms.VisualElement,System.String,System.Int32)">
            <summary>
            Display toast with the default visual configuration
            </summary>
            <param name="visualElement">Toast anchor</param>
            <param name="message">Toast text</param>
            <param name="durationMilliseconds">Toast duration (milliseconds)</param>
            <returns>Task</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.VisualElementExtension.DisplayToastAsync(Xamarin.Forms.VisualElement,Xamarin.CommunityToolkit.UI.Views.Options.ToastOptions)">
            <summary>
            Display toast with the custom options
            </summary>
            <param name="visualElement">Toast anchor</param>
            <param name="toastOptions">Toast options</param>
            <returns>Task</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.VisualElementExtension.DisplaySnackBarAsync(Xamarin.Forms.VisualElement,System.String,System.String,System.Func{System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})">
            <summary>
            Display snackbar with the default visual configuration
            </summary>
            <param name="visualElement">Anchor element</param>
            <param name="message">Text of the snackbar</param>
            <param name="actionButtonText">Text of the snackbar button</param>
            <param name="action">Action of the snackbar button</param>
            <param name="duration">Snackbar duration</param>
            <returns>True if snackbar action is executed. False if snackbar is closed by timeout</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Extensions.VisualElementExtension.DisplaySnackBarAsync(Xamarin.Forms.VisualElement,Xamarin.CommunityToolkit.UI.Views.Options.SnackBarOptions)">
            <summary>
            Display snackbar with custom configuration
            </summary>
            <param name="visualElement">Snackbar anchor</param>
            <param name="snackBarOptions">Snackbar options</param>
            <returns>True if snackbar action is executed. False if snackbar is closed by timeout</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Helpers.DelegateWeakEventManager">
            <summary>
            Weak Delegate event manager that allows for garbage collection when the EventHandler is still subscribed
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.DelegateWeakEventManager.AddEventHandler(System.Delegate,System.String)">
            <summary>
            Adds the event handler
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.DelegateWeakEventManager.RemoveEventHandler(System.Delegate,System.String)">
            <summary>
            Removes the event handler.
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.DelegateWeakEventManager.HandleEvent(System.Object,System.Object,System.String)">
            <summary>
            Invokes the event EventHandler
            </summary>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.DelegateWeakEventManager.HandleEvent(System.String)">
            <summary>
            Invokes the event Action
            </summary>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.DelegateWeakEventManager.RaiseEvent(System.Object,System.Object,System.String)">
            <summary>
            Invokes the event EventHandler
            </summary>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.DelegateWeakEventManager.RaiseEvent(System.String)">
            <summary>
            Invokes the event Action
            </summary>
            <param name="eventName">Event name</param>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Helpers.MultiBindingCondition">
            <summary>
            Different types of conditions that can be used in <see cref="T:Xamarin.CommunityToolkit.Converters.VariableMultiValueConverter"/>.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Helpers.MultiBindingCondition.None">
            <summary>None of the values should be true.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Helpers.MultiBindingCondition.All">
            <summary>All of the values should be true.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Helpers.MultiBindingCondition.Any">
            <summary>Any of the values should be true.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Helpers.MultiBindingCondition.Exact">
            <summary>The exact number as configured in <see cref="P:Xamarin.CommunityToolkit.Converters.VariableMultiValueConverter.Count"/> should be true.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Helpers.MultiBindingCondition.GreaterThan">
            <summary>At least the number as configured in <see cref="P:Xamarin.CommunityToolkit.Converters.VariableMultiValueConverter.Count"/> should be true.</summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.Helpers.MultiBindingCondition.LessThan">
            <summary>At most the number as configured in <see cref="P:Xamarin.CommunityToolkit.Converters.VariableMultiValueConverter.Count"/> should be true.</summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Helpers.SafeFireAndForgetExtensions">
            <summary>
            Extension methods for System.Threading.Tasks.Task and System.Threading.Tasks.ValueTask
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.SafeFireAndForgetExtensions.SafeFireAndForget(System.Threading.Tasks.ValueTask,System.Action{System.Exception}@,System.Boolean@)">
            <summary>
            Safely execute the ValueTask without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">ValueTask.</param>
            <param name="onException">If an exception is thrown in the ValueTask, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.SafeFireAndForgetExtensions.SafeFireAndForget``1(System.Threading.Tasks.ValueTask,System.Action{``0}@,System.Boolean@)">
            <summary>
            Safely execute the ValueTask without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">ValueTask.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <typeparam name="TException">Exception type. If an exception is thrown of a different type, it will not be handled</typeparam>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.SafeFireAndForgetExtensions.SafeFireAndForget(System.Threading.Tasks.Task,System.Action{System.Exception}@,System.Boolean@)">
            <summary>
            Safely execute the Task without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">Task.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.SafeFireAndForgetExtensions.SafeFireAndForget``1(System.Threading.Tasks.Task,System.Action{``0}@,System.Boolean@)">
            <summary>
            Safely execute the Task without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">Task.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <typeparam name="TException">Exception type. If an exception is thrown of a different type, it will not be handled</typeparam>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Helpers.WeakEventManager`1">
            <summary>
            Weak event manager that allows for garbage collection when the EventHandler is still subscribed
            </summary>
            <typeparam name="TEventArgs">Event args type.</typeparam>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.WeakEventManager`1.AddEventHandler(System.EventHandler{`0},System.String)">
            <summary>
            Adds the event handler
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.WeakEventManager`1.AddEventHandler(System.Action{`0},System.String)">
            <summary>
            Adds the event handler
            </summary>
            <param name="action">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.WeakEventManager`1.RemoveEventHandler(System.EventHandler{`0},System.String)">
            <summary>
            Removes the event handler
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.WeakEventManager`1.RemoveEventHandler(System.Action{`0},System.String)">
            <summary>
            Removes the event handler
            </summary>
            <param name="action">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.WeakEventManager`1.HandleEvent(System.Object,`0,System.String)">
            <summary>
            Invokes the event EventHandler
            </summary>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.WeakEventManager`1.HandleEvent(`0,System.String)">
            <summary>
            Invokes the event Action
            </summary>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.WeakEventManager`1.RaiseEvent(System.Object,`0,System.String)">
            <summary>
            Invokes the event EventHandler
            </summary>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.WeakEventManager`1.RaiseEvent(`0,System.String)">
            <summary>
            Invokes the event Action
            </summary>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="T:Xamarin.CommunityToolkit.Helpers.WeakEventManagerExtensions">
            <summary>
            Extensions for Xamarin.Forms.WeakEventManager
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.WeakEventManagerExtensions.RaiseEvent(Xamarin.Forms.WeakEventManager,System.Object,System.Object,System.String)">
            <summary>
            Invokes the event EventHandler
            </summary>
            <param name="weakEventManager">WeakEventManager</param>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.Helpers.XCT.Init">
            <summary>
            Just a wrapper to solve VS xaml issues
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.AsyncCommand`2">
            <summary>
            An implementation of IAsyncCommand. Allows Commands to safely be used asynchronously with Task.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncCommand`2.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Func{`1,System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncCommand`2.ExecuteAsync(`0)">
            <summary>
            Executes the Command as a Task
            </summary>
            <returns>The executed Task</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.AsyncCommand`1">
            <summary>
            An implementation of IAsyncCommand. Allows Commands to safely be used asynchronously with Task.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Func{System.Object,System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Func{System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncCommand`1.ExecuteAsync(`0)">
            <summary>
            Executes the Command as a Task
            </summary>
            <returns>The executed Task</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.AsyncCommand">
            <summary>
            An implementation of IAsyncCommand. Allows Commands to safely be used asynchronously with Task.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Object,System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncCommand.ExecuteAsync">
            <summary>
            Executes the Command as a Task
            </summary>
            <returns>The executed Task</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand`2.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask},System.Func{`1,System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncValueCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand`2.ExecuteAsync(`0)">
            <summary>
            Executes the Command as a ValueTask
            </summary>
            <returns>The executed ValueTask</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand`1">
            <summary>
            An implementation of IAsyncValueCommand. Allows Commands to safely be used asynchronously with Task.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask},System.Func{System.Object,System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncValueCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask},System.Func{System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncValueCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand`1.ExecuteAsync(`0)">
            <summary>
            Executes the Command as a ValueTask
            </summary>
            <returns>The executed ValueTask</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand">
            <summary>
            An implementation of IAsyncValueCommand. Allows Commands to safely be used asynchronously with Task.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand.#ctor(System.Func{System.Threading.Tasks.ValueTask},System.Func{System.Object,System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncValueCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand.#ctor(System.Func{System.Threading.Tasks.ValueTask},System.Func{System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncValueCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.AsyncValueCommand.ExecuteAsync">
            <summary>
            Executes the Command as a ValueTask
            </summary>
            <returns>The executed ValueTask</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.CommandFactory">
            <summary>
            Factory for Xamarin.Forms.Command
            </summary>
            <summary>
            Factory for IAsyncCommand
            </summary>
            <summary>
            Factory for IAsyncValueCommand
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create(System.Action)">
            <summary>
            Initializes Xamarin.Forms.Command
            </summary>
            <param name="execute">The Function executed when Execute is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <returns>Xamarin.Forms.Command</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes Xamarin.Forms.Command
            </summary>
            <param name="execute">The Function executed when Execute is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <returns>Xamarin.Forms.Command</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create(System.Action{System.Object})">
            <summary>
            Initializes Xamarin.Forms.Command
            </summary>
            <param name="execute">The Function executed when Execute is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <returns>Xamarin.Forms.Command</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes Xamarin.Forms.Command
            </summary>
            <param name="execute">The Function executed when Execute is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <returns>Xamarin.Forms.Command</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create``1(System.Action{``0})">
            <summary>
            Initializes Xamarin.Forms.Command<typeparamref name="T"/>
            </summary>
            <param name="execute">The Function executed when Execute is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <returns>Xamarin.Forms.Command<typeparamref name="T"/></returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Initializes Xamarin.Forms.Command<typeparamref name="T"/>
            </summary>
            <param name="execute">The Function executed when Execute is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <returns>Xamarin.Forms.Command<typeparamref name="T"/></returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create(System.Func{System.Threading.Tasks.Task},System.Func{System.Object,System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of IAsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <returns>IAsyncCommand</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of IAsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <returns>IAsyncCommand</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create``1(System.Func{``0,System.Threading.Tasks.Task},System.Func{System.Object,System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of IAsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <returns>IAsyncCommand<typeparamref name="TExecute"/></returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create``1(System.Func{``0,System.Threading.Tasks.Task},System.Func{System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of IAsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <returns>IAsyncCommand<typeparamref name="TExecute"/></returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create``2(System.Func{``0,System.Threading.Tasks.Task},System.Func{``1,System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of IAsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <returns>IAsyncCommand</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of IAsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <returns>IAsyncCommand</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create(System.Func{System.Threading.Tasks.Task},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of IAsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <returns>IAsyncCommand</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of IAsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <returns>IAsyncCommand</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of IAsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <returns>IAsyncCommand</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create``1(System.Func{``0,System.Threading.Tasks.Task},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of IAsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <returns>IAsyncCommand</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create``1(System.Func{``0,System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of IAsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <returns>IAsyncCommand</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create``2(System.Func{``0,System.Threading.Tasks.Task},System.Func{``1,System.Boolean})">
            <summary>
            Initializes a new instance of IAsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <returns>IAsyncCommand</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create(System.Func{System.Threading.Tasks.ValueTask},System.Func{System.Object,System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncValueCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <returns>IAsyncValueCommand</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create(System.Func{System.Threading.Tasks.ValueTask},System.Func{System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncValueCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <returns>IAsyncValueCommand</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create``1(System.Func{``0,System.Threading.Tasks.ValueTask},System.Func{System.Object,System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncValueCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <returns>IAsyncValueCommand<typeparamref name="TExecute"/></returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create``1(System.Func{``0,System.Threading.Tasks.ValueTask},System.Func{System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncValueCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <returns>IAsyncValueCommand<typeparamref name="TExecute"/></returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.CommandFactory.Create``2(System.Func{``0,System.Threading.Tasks.ValueTask},System.Func{``1,System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncValueCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <returns>IAsyncValueCommand></returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.ObservableRangeCollectionExtension.Add``1(Xamarin.CommunityToolkit.ObjectModel.ObservableRangeCollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To be used in collection initializer
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.Grouping`2">
            <summary>
            Grouping of items by key into ObservableRange
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.Grouping`2.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.Grouping`2.Items">
            <summary>
            Returns list of items in the grouping.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.Grouping`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the Grouping class.
            </summary>
            <param name="key">Key.</param>
            <param name="items">Items.</param>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.Grouping`3">
            <summary>
            Grouping of items by key and subkey into ObservableRange
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.Grouping`3.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.Grouping`3.SubKey">
            <summary>
            Gets the subkey of the grouping
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.Grouping`3.Items">
            <summary>
            Returns list of items in the grouping.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.Grouping`3.#ctor(`0,`1,System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Initializes a new instance of the Grouping class.
            </summary>
            <param name="key">Key.</param>
            <param name="subkey">Subkey</param>
            <param name="items">Items.</param>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand`2">
            <summary>
            An Async implementation of ICommand for Task
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand`2.CanExecute(`1)">
            <summary>
            Determines whether the command can execute in its current state
            </summary>
            <returns><c>true</c>, if this command can be executed; otherwise, <c>false</c>.</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand`1">
            <summary>
            An Async implementation of ICommand for Task
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand`1.IsExecuting">
            <summary>
            Returns true when the Command is currently executing. Returns false when the Command is not executing
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand`1.AllowsMultipleExecutions">
            <summary>
            Returns true if the Command allows simultaneous executions
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand`1.ExecuteAsync(`0)">
            <summary>
            Executes the Command as a Task
            </summary>
            <returns>The Task to execute</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand">
            <summary>
            An Async implementation of ICommand for Task
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand.IsExecuting">
            <summary>
            Returns true when the Command is currently executing. Returns false when the Command is not executing
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand.AllowsMultipleExecutions">
            <summary>
            Returns true if the Command allows simultaneous executions
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand.ExecuteAsync">
            <summary>
            Executes the Command as a Task
            </summary>
            <returns>The Task to execute</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.IAsyncCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand`2">
            <summary>
            An Async implementation of ICommand for ValueTask
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand`2.CanExecute(`1)">
            <summary>
            Determines whether the command can execute in its current state
            </summary>
            <returns><c>true</c>, if this command can be executed; otherwise, <c>false</c>.</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand`1">
            <summary>
            An Async implementation of ICommand for ValueTask
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand`1.IsExecuting">
            <summary>
            Returns true when the Command is currently executing. Returns false when the Command is not executing
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand`1.AllowsMultipleExecutions">
            <summary>
            Returns true if the Command allows simultaneous executions
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand`1.ExecuteAsync(`0)">
            <summary>
            Executes the Command as a ValueTask
            </summary>
            <returns>The ValueTask to execute</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand">
            <summary>
            An Async implementation of ICommand for ValueTask
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand.IsExecuting">
            <summary>
            Returns true when the Command is currently executing. Returns false when the Command is not executing
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand.AllowsMultipleExecutions">
            <summary>
            Returns true if the Command allows simultaneous executions
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand.ExecuteAsync">
            <summary>
            Executes the Command as a ValueTask
            </summary>
            <returns>The ValueTask to execute</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.IAsyncValueCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseAsyncCommand`2">
            <summary>
            Abstract Base Class used by AsyncValueCommand
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseAsyncCommand`2.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Func{`1,System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of BaseAsyncCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseAsyncCommand`2.ConvertExecute(System.Func{System.Threading.Tasks.Task})" -->
        <!-- Badly formed XML comment ignored for member "M:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseAsyncCommand`2.ConvertCanExecute(System.Func{System.Boolean})" -->
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseAsyncCommand`2.ExecuteAsync(`0)">
            <summary>
            Executes the Command as a Task
            </summary>
            <returns>The executed Task</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseAsyncValueCommand`2">
            <summary>
            Abstract Base Class used by AsyncValueCommand
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseAsyncValueCommand`2.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask},System.Func{`1,System.Boolean},System.Action{System.Exception},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of BaseAsyncValueCommand
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseAsyncValueCommand`2.ConvertExecute(System.Func{System.Threading.Tasks.ValueTask})" -->
        <!-- Badly formed XML comment ignored for member "M:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseAsyncValueCommand`2.ConvertCanExecute(System.Func{System.Boolean})" -->
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseAsyncValueCommand`2.ExecuteAsync(`0)">
            <summary>
            Executes the Command as a Task
            </summary>
            <returns>The executed Value</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseCommand`1">
            <summary>
            Abstract Base Class used by AsyncCommand and AsyncValueCommand
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseCommand`1.#ctor(System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            Initializes BaseCommand
            </summary>
            <param name="canExecute"></param>
            <param name="allowsMultipleExecutions"></param>
        </member>
        <member name="E:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseCommand`1.IsExecuting">
            <summary>
            Returns true when the Command is currently executing. Returns false when the Command is not executing
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseCommand`1.AllowsMultipleExecutions">
            <summary>
            Returns true if the Command allows simultaneous executions
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseCommand`1.CanExecute(`0)">
            <summary>
            Determines whether the command can execute in its current state
            </summary>
            <returns><c>true</c>, if this command can be executed; otherwise, <c>false</c>.</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the `ICommand.CanExecuteChanged` event.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.Internals.BaseCommand`1.ChangeCanExecute">
            <summary>
            Raises the `ICommand.CanExecuteChanged` event. Recommend using RaiseCanExecuteChanged() instead.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.ObservableObject">
            <summary>
            Observable object with INotifyPropertyChanged implemented using WeakEventManager
            </summary>
        </member>
        <member name="E:Xamarin.CommunityToolkit.ObjectModel.ObservableObject.PropertyChanged">
            <summary>
            Occurs when property changed.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.ObservableObject.SetProperty``1(``0@,``0,System.String,System.Action,System.Action,System.Func{``0,``0,System.Boolean})">
            <summary>
            Sets the property.
            </summary>
            <returns><c>true</c>, if property was set, <c>false</c> otherwise.</returns>
            <param name="backingStore">Backing store.</param>
            <param name="value">Value.</param>
            <param name="validateValue">Validates value.</param>
            <param name="propertyName">Property name.</param>
            <param name="onChanged">On changed.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.ObservableObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="T:Xamarin.CommunityToolkit.ObjectModel.ObservableRangeCollection`1">
            <summary>
            Represents a dynamic data collection that provides notifications when items get added, removed, or when the whole list is refreshed.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.ObservableRangeCollection`1.#ctor">
            <summary>
            Initializes a new instance of the System.Collections.ObjectModel.ObservableCollection(Of T) class.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.ObservableRangeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the System.Collections.ObjectModel.ObservableCollection(Of T) class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">collection: The collection from which the elements are copied.</param>
            <exception cref="T:System.ArgumentNullException">The collection parameter cannot be null.</exception>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.ObservableRangeCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Adds the elements of the specified collection to the end of the ObservableCollection(Of T).
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.ObservableRangeCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Removes the first occurence of each item in the specified collection from ObservableCollection(Of T). NOTE: with notificationMode = Remove, removed items starting index is not set because items are not guaranteed to be consecutive.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.ObservableRangeCollection`1.Replace(`0)">
            <summary>
            Clears the current collection and replaces it with the specified item.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.ObjectModel.ObservableRangeCollection`1.ReplaceRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clears the current collection and replaces it with the specified collection.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.AvatarView">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView"/> control allows the user to display an avatar or the user's initials if no avatar is available. By binding the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Source"/> property the user can assign an image to the <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView"/>. Simultaneously binding the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Text"/> property will allow the user to also set the initials to be shown if no valid image is provided.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.AvatarView.AspectProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Aspect"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.AvatarView.SizeProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Size"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.AvatarView.CornerRadiusProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.CornerRadius"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.AvatarView.BorderColorProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.BorderColor"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.AvatarView.ColorProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Color"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.AvatarView.SourceProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Source"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.AvatarView.TextProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Text"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.AvatarView.TextColorProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.TextColor"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.AvatarView.FontFamilyProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.FontFamily"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.AvatarView.FontSizeProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.FontSize"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.AvatarView.FontAttributesProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.FontAttributes"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.AvatarView.ColorThemeProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.ColorTheme"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Aspect">
            <summary>
            Setting the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Aspect"/> property determines how the avatar image is shown. Depending on the <see cref="T:Xamarin.Forms.Aspect"/> value it might crop the assigned image. This only applies when <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Source"/> is set and results in showing an image. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Size">
            <summary>
            Gets or sets the size of the image for the <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView"/>. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.CornerRadius">
            <summary>
            Gets or sets the corner radius of the image for the <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView"/>. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.BorderColor">
            <summary>
            Gets or sets the border <see cref="T:Xamarin.Forms.Color"/> of the image for the <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView"/>. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Color">
            <summary>
            Gets or sets the background <see cref="T:Xamarin.Forms.Color"/> of the  for the <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView"/>. This only applies when <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Source"/> is not set or doesn't result in a showing image. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Source">
            <summary>
            Gets or sets the <see cref="T:Xamarin.Forms.ImageSource"/> that is used to try and show an avatar image. If the image could not be loaded, the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Text"/> will be shown. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Text">
            <summary>
            Gets or sets the text for the <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView"/>. Which is shown instead of the image when the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Source"/> is either not set or doesn't result in showing an image. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.TextColor">
            <summary>
            Gets or sets the <see cref="T:Xamarin.Forms.Color"/> of the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Text"/> for the <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView"/>. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.FontFamily">
            <summary>
            Font of the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Text"/> on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView" />. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.FontSize">
            <summary>
            Font size of the text on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView" />. <see cref="T:Xamarin.Forms.NamedSize" /> values can be used. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.FontAttributes">
            <summary>
            Font attributes of the text on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView" />. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.ColorTheme">
            <summary>
            Gets or sets the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.ColorTheme"/> to be used on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView"/>. This only applies when the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Source"/> is not set or doesn't result in showing an image. This is a bindable property.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.ColorTheme">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.UI.Views.ColorTheme"/> can be used to make the <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView"/> have a consistent look. A theme consists of a set of colors that are used and applied to a variety of properties on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView"/>. You can also implement your own theme by implementing the <see cref="T:Xamarin.CommunityToolkit.UI.Views.IColorTheme"/> interface.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.ColorTheme.#ctor(Xamarin.Forms.Color[],Xamarin.Forms.Color[])">
            <summary>
            Constructor of <see cref="T:Xamarin.CommunityToolkit.UI.Views.ColorTheme"/> where you can specify color sets for the foreground and background. Depending on the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.Text"/> a random color from the set gets selected. This makes it very easy to create a consistent look.
            </summary>
            <param name="foregroundColors">List of <see cref="T:Xamarin.Forms.Color"/> that can be picked from as foreground colors</param>
            <param name="backgroundColors">List of <see cref="T:Xamarin.Forms.Color"/> that can be picked from as background colors</param>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.ColorTheme.Default">
            <summary>
            Default <see cref="T:Xamarin.CommunityToolkit.UI.Views.ColorTheme"/> used by <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.ColorTheme"/> whenever a theme is not set.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.ColorTheme.Jungle">
            <summary>
            A Junge inspirated <see cref="T:Xamarin.CommunityToolkit.UI.Views.ColorTheme"/>.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.ColorTheme.Desert">
            <summary>
            A Desert inspirated <see cref="T:Xamarin.CommunityToolkit.UI.Views.ColorTheme"/>.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.ColorTheme.Ocean">
            <summary>
            A Ocean inspirated <see cref="T:Xamarin.CommunityToolkit.UI.Views.ColorTheme"/>.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.ColorTheme.Volcano">
            <summary>
            A Volcano inspirated <see cref="T:Xamarin.CommunityToolkit.UI.Views.ColorTheme"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.IColorTheme">
            <summary>
            By implementing the <see cref="T:Xamarin.CommunityToolkit.UI.Views.IColorTheme"/> you can compose your own theme that can be used with the <see cref="T:Xamarin.CommunityToolkit.UI.Views.AvatarView"/> to create a consistent look. Assign the implementation of this interface to the <see cref="P:Xamarin.CommunityToolkit.UI.Views.AvatarView.ColorTheme"/> property to use it.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.BadgeAnimation">
            <summary>
            This is the default animation that is used when the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.IsAnimated"/> is set to true.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.BadgeAnimation.OnAppearing(Xamarin.Forms.View)">
            <summary>
            With the <see cref="M:Xamarin.CommunityToolkit.UI.Views.BadgeAnimation.OnAppearing(Xamarin.Forms.View)"/> method you can influence the animation that is used when the <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView"/> appears.
            </summary>
            <param name="badgeView">The <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView"/> instance on which the animation will be applied</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.BadgeAnimation.OnDisappering(Xamarin.Forms.View)">
            <summary>
            With the <see cref="M:Xamarin.CommunityToolkit.UI.Views.BadgeAnimation.OnDisappering(Xamarin.Forms.View)"/> method you can influence the animation that is used when the <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView"/> disappears.
            </summary>
            <param name="badgeView">The <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView"/> instance on which the animation will be applied</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.BadgePosition">
            <summary>
            Determines the position where the badge will be shown on top of <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.Content"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.BadgeView">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView"/> allows the user to show a badge with a string value on top of any control. By wrapping a control in a <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView"/> control, you can show a badge value on top of it. This is very much like the badges you see on the app icons on iOS and Android.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BadgeView.ContentProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.Content"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.Content">
            <summary>
            Gets or sets the <see cref="T:Xamarin.Forms.View"/> on top of which the <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView"/> will be shown. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BadgeView.BadgePositionProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.BadgePosition"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.BadgePosition">
            <summary>
            Determines the position where the badge will be shown on top of <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.Content"/>. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BadgeView.AutoHideProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.AutoHide"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.AutoHide">
            <summary>
            Determines whether or not the badge is automatically hidden when the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.Text"/> is set to 0. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BadgeView.IsAnimatedProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.IsAnimated"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.IsAnimated">
            <summary>
            Determines if an animation is used when the badge is shown or hidden. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BadgeView.BadgeAnimationProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.BadgeAnimation"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.BadgeAnimation">
            <summary>
            Gets or sets the animation that is used when the badge is shown or hidden. The animation only shows when <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.IsAnimated"/> is set to true. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BadgeView.BackgroundColorProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.BackgroundColor"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.BackgroundColor">
            <summary>
            Gets or sets the background <see cref="T:Xamarin.Forms.Color"/> of the badge. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BadgeView.BorderColorProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.BorderColor"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.BorderColor">
            <summary>
            Gets or sets the border <see cref="T:Xamarin.Forms.Color"/> of the badge. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BadgeView.CornerRadiusProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.CornerRadius"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.CornerRadius">
            <summary>
            Gets or sets the corner radius of the <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView"/>. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BadgeView.HasShadowProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.HasShadow"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.HasShadow">
            <summary>
            Enabled or disables a shadow being shown behind the <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView"/>. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BadgeView.TextColorProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.TextColor"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.TextColor">
            <summary>
            Gets or sets the <see cref="T:Xamarin.Forms.Color"/> or the test shown in  the <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView"/>. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BadgeView.TextProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.Text"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.Text">
            <summary>
            Text that is shown on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView"/>. Set this property to 0 and <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.AutoHide"/> to true, to make the badge disappear automatically. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BadgeView.FontSizeProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.FontSize"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.FontSize">
            <summary>
            Font size of all the text on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView" />. <see cref="T:Xamarin.Forms.NamedSize" /> values can be used. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BadgeView.FontFamilyProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.FontFamily"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.FontFamily">
            <summary>
            Font of the text on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView" />. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BadgeView.FontAttributesProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.FontAttributes"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.FontAttributes">
            <summary>
            Font attributes of all the text on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView" />. This is a bindable property.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.IBadgeAnimation">
            <summary>
            You can implement this interface to create your own animations to be used on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.BadgeView"/>. Create an implementation of <see cref="T:Xamarin.CommunityToolkit.UI.Views.IBadgeAnimation"/>, assign the implemenatation to the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.BadgeAnimation"/> and set <see cref="P:Xamarin.CommunityToolkit.UI.Views.BadgeView.IsAnimated"/> to true.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.Internals.BaseTemplatedView`1">
            <summary>
            Abstract class that templated views should inherit
            </summary>
            <typeparam name="TControl">The type of the control that this template will be used for</typeparam>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.Internals.BaseTemplatedView`1.#ctor">
            <summary>
            Constructor of <see cref="T:Xamarin.CommunityToolkit.UI.Views.Internals.BaseTemplatedView`1" />
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.MediaCapturedEventArgs.ImageData">
            <summary>
            Raw image data, only filled when taking a picture and SavePhotoToFile is false
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.MediaCapturedEventArgs.Rotation">
            <summary>
            Applied image rotation for correct orientation on Android devices
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.Dock">
            <summary>
            Possible values in what direction a child element will be docked in within the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DockLayout"/>,
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.DockLayout">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.UI.Views.DockLayout"/> makes it easy to dock content in all four directions (top, bottom, left and right).
            This makes it a great choice in many situations, where you want to divide the screen into specific areas,
            especially because by default, the last element inside the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DockLayout"/>, unless this feature is specifically disabled,
            will automatically fill the rest of the space (center).
            Inspired by WPF DockPanel: https://docs.microsoft.com/dotnet/api/system.windows.controls.dockpanel?view=netframework-4.8
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.DockLayout.DockProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.DockLayout.Dock"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.DockLayout.Dock">
            <summary>
            Gets or sets in what direction the child element is docked. Attached property that needs to be set on children of the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DockLayout"/>. This is a bindable property.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.DockLayout.GetDock(Xamarin.Forms.BindableObject)">
            <summary>
            For internal use by the Xamarin Community Toolkit. This method gets the <see cref="P:Xamarin.CommunityToolkit.UI.Views.DockLayout.Dock"/> property on a child element.
            </summary>
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject"/> the attached <see cref="P:Xamarin.CommunityToolkit.UI.Views.DockLayout.Dock"/> property value is retrieved from</param>
            <returns>The direction in which the child element wants to be docked</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.DockLayout.SetDock(Xamarin.Forms.BindableObject,Xamarin.CommunityToolkit.UI.Views.Dock)">
            <summary>
            For internal use by the Xamarin Community Toolkit. This method sets the <see cref="P:Xamarin.CommunityToolkit.UI.Views.DockLayout.Dock"/> property on a child element.
            </summary>
            <param name="bindable">The <see cref="T:Xamarin.Forms.BindableObject"/> the attached <see cref="P:Xamarin.CommunityToolkit.UI.Views.DockLayout.Dock"/> property value is set on</param>
            <returns>The direction in which the child element will be docked</returns>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.DockLayout.LastChildFillProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.DockLayout.LastChildFill"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.DockLayout.LastChildFill">
            <summary>
            The default behavior is that the last child of the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DockLayout"/> takes up the rest of the space, this can be disabled setting the <see cref="P:Xamarin.CommunityToolkit.UI.Views.DockLayout.LastChildFill"/> property to false.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.DrawingLineCompletedEventArgs">
            <summary>
            Contains last drawing line
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.DrawingLineCompletedEventArgs.Line">
            <summary>
            Last drawing line
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.DrawingLineCompletedEventArgs.#ctor(Xamarin.CommunityToolkit.UI.Views.Line)">
            <summary>
            Initializes last drawing line
            </summary>
            <param name="line">Last drawing line</param>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.DrawingView">
            <summary>
            The DrawingView allows you to draw one or multiple lines on a canvas
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.DrawingView.ClearOnFinishProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.ClearOnFinish"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.DrawingView.MultiLineModeProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.MultiLineMode"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.DrawingView.LinesProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.Lines"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.DrawingView.DrawingLineCompletedCommandProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.DrawingLineCompletedCommand"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.DrawingView.DefaultLineColorProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.DefaultLineColor"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.DrawingView.DefaultLineWidthProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.DefaultLineWidth"/> property.
            </summary>
        </member>
        <member name="E:Xamarin.CommunityToolkit.UI.Views.DrawingView.DrawingLineCompleted">
            <summary>
            Event occured when drawing line completed
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.DrawingView.#ctor">
            <summary>
            Initializes the DrawingView
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.DefaultLineColor">
            <summary>
            The <see cref="T:Xamarin.Forms.Color"/> that is used by default to draw a line on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DrawingView"/>. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.DefaultLineWidth">
            <summary>
            The width that is used by default to draw a line on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DrawingView"/>. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.DrawingLineCompletedCommand">
            <summary>
            This command is invoked whenever the drawing of a line on <see cref="T:Xamarin.CommunityToolkit.UI.Views.DrawingView"/> has completed.
            Note that this is fired after the tap or click is lifted. When <see cref="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.MultiLineMode"/> is enabled
            this command is fired multiple times.
            This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.Lines">
            <summary>
            The collection of lines that are currently on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DrawingView"/>. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.MultiLineMode">
            <summary>
            Toggles multi-line mode. When true, multiple lines can be drawn on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DrawingView"/> while the tap/click is released in-between lines.
            Note: when <see cref="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.ClearOnFinish"/> is also enabled, the lines are cleared after the tap/click is released.
            Additionally, <see cref="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.DrawingLineCompletedCommand"/> will be fired after each line that is drawn.
            This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.ClearOnFinish">
            <summary>
            Indicates whether the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DrawingView"/> is cleared after releasing the tap/click and a line is drawn.
            Note: when <see cref="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.MultiLineMode"/> is also enabled, this might cause unexpected behavior.
            This is a bindable property.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.DrawingView.GetImageStream(System.Double,System.Double)">
            <summary>
            Retrieves a <see cref="T:System.IO.Stream"/> containing an image of the <see cref="P:Xamarin.CommunityToolkit.UI.Views.DrawingView.Lines"/> that are currently drawn on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DrawingView"/>.
            </summary>
            <param name="imageSizeWidth">Desired width of the image that is returned.</param>
            <param name="imageSizeHeight">Desired heigth of the image that is returned.</param>
            <returns><see cref="T:System.IO.Stream"/> containing the data of the requested image with data that's currently on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DrawingView"/>.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.DrawingView.GetImageStream(System.Collections.Generic.IEnumerable{Xamarin.CommunityToolkit.UI.Views.Line},Xamarin.Forms.Size,Xamarin.Forms.Color)">
            <summary>
            Retrieves a <see cref="T:System.IO.Stream"/> containing an image of the collection of <see cref="T:Xamarin.CommunityToolkit.UI.Views.Line"/> that is provided as a parameter.
            </summary>
            <param name="lines">A collection of <see cref="T:Xamarin.CommunityToolkit.UI.Views.Line"/> that a image is generated from.</param>
            <param name="imageSize">The desired dimensions of the generated image.</param>
            <param name="backgroundColor">Background color of the generated image.</param>
            <returns><see cref="T:System.IO.Stream"/> containing the data of the requested image with data that's provided through the <paramref name="lines"/> parameter.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.DrawingView.OnDrawingLineCompleted(Xamarin.CommunityToolkit.UI.Views.Line)">
            <summary>
            Executes DrawingLineCompleted event and DrawingLineCompletedCommand
            </summary>
            <param name="lastDrawingLine">Last drawing line</param>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.Extensions">
            <summary>
            Extension methods to support <see cref="T:Xamarin.CommunityToolkit.UI.Views.DrawingView"/>
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.Extensions.SmoothedPathWithGranularity(System.Collections.ObjectModel.ObservableCollection{Xamarin.Forms.Point},System.Int32)">
            <summary>
            Get smoothed path.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.Line">
            <summary>
            The Line object is used to describe the lines that are drawn on a <see cref="!:DrawView"/>.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Line.GranularityProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Line.Granularity"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Line.EnableSmoothedPathProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Line.EnableSmoothedPath"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Line.PointsProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Line.Points"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Line.LineColorProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Line.LineColor"/> property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Line.LineWidthProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Line.LineWidth"/> property.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.Line.#ctor">
            <summary>
            Initializes a new Line object.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Line.LineColor">
            <summary>
            The <see cref="T:Xamarin.Forms.Color"/> that is used to draw this line on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DrawingView"/>. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Line.LineWidth">
            <summary>
            The width that is used to draw this line on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DrawingView"/>. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Line.Points">
            <summary>
            The collection of <see cref="T:Xamarin.Forms.Point"/> that makes up this line on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DrawingView"/>. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Line.Granularity">
            <summary>
            The granularity of this line. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Line.EnableSmoothedPath">
            <summary>
            Enables or disabled if this line is smoothed (anti-aliased) when drawn. This is a bindable property.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.Line.GetImageStream(System.Double,System.Double,Xamarin.Forms.Color)">
            <summary>
            Retrieves a <see cref="T:System.IO.Stream"/> containing an image of this line, based on the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Line.Points"/> data.
            </summary>
            <param name="imageSizeWidth">Desired width of the image that is returned.</param>
            <param name="imageSizeHeight">Desired heigth of the image that is returned.</param>
            <param name="backgroundColor">Background color of the generated image.</param>
            <returns><see cref="T:System.IO.Stream"/> containing the data of the requested image with data that's currently on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.DrawingView"/>.</returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.Line.GetImageStream(System.Collections.Generic.IEnumerable{Xamarin.Forms.Point},Xamarin.Forms.Size,System.Single,Xamarin.Forms.Color,Xamarin.Forms.Color)">
            <summary>
            Retrieves a <see cref="T:System.IO.Stream"/> containing an image of the collection of <see cref="T:Xamarin.Forms.Point"/> that is provided as a parameter.
            </summary>
            <param name="points">A collection of <see cref="T:Xamarin.Forms.Point"/> that a image is generated from.</param>
            <param name="imageSize">The desired dimensions of the generated image.</param>
            <param name="lineWidth">The desired line width to be used in the generated image.</param>
            <param name="strokeColor">The desired color of the line to be used in the generated image.</param>
            <param name="backgroundColor">Background color of the generated image.</param>
            <returns><see cref="T:System.IO.Stream"/> containing the data of the requested image with data that's provided through the <paramref name="points"/> parameter.</returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.HexLayout">
            <summary>
            A Layout that arranges the elements in a honeycomb pattern.
            Based on https://github.com/AlexanderSharykin/HexGrid. Created by Alexander Sharykin.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.BaseLazyView">
            <summary>
            Abstract base class for <see cref="T:Xamarin.CommunityToolkit.UI.Views.LazyView`1"/>
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.BaseLazyView.IsLoadedProperty">
            <summary>
            This is a read-only <see cref="T:Xamarin.Forms.BindableProperty"/> that indicates when the view is loaded.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BaseLazyView.IsLoaded">
            <summary>
            This is a read-only property that indicates when the view is loaded.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.BaseLazyView.SetIsLoaded(System.Boolean)">
            <summary>
            This method change the value of the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BaseLazyView.IsLoaded"/> property.
            </summary>
            <param name="isLoaded"></param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.BaseLazyView.LoadViewAsync">
            <summary>
            Use this method to do the initialization of the <see cref="T:Xamarin.Forms.View"/> and change the status IsLoaded value here.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.BaseLazyView.Dispose">
            <summary>
            This method dispose the <see cref="P:Xamarin.Forms.ContentView.Content"/> if it's <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.LazyView`1">
            <summary>
            This a basic implementation of the LazyView based on <see cref="T:Xamarin.CommunityToolkit.UI.Views.BaseLazyView"/> use this an exemple to create yours
            </summary>
            <typeparam name="TView">Any <see cref="T:Xamarin.Forms.View"/></typeparam>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.LazyView`1.LoadViewAsync">
            <summary>
            This method initializes your <see cref="T:Xamarin.CommunityToolkit.UI.Views.LazyView`1"/>.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.BasePopup">
            <summary>
            The popup control's base implementation.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.BasePopup.#ctor">
            <summary>
            Instantiates a new instance of <see cref="T:Xamarin.CommunityToolkit.UI.Views.BasePopup"/>.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BasePopup.Content">
            <summary>
            Gets or sets the <see cref="T:Xamarin.Forms.View"/> content to render in the Popup.
            </summary>
            <remarks>
            The View can be of type: <see cref="T:Xamarin.Forms.View"/>, <see cref="T:Xamarin.Forms.ContentPage"/> or <see cref="T:Xamarin.Forms.NavigationPage"/>
            </remarks>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BasePopup.Color">
            <summary>
            Gets or sets the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BasePopup.Color"/> of the Popup.
            </summary>
            <remarks>
            This color sets the native background color of the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Popup"/>, which is
            independent of any background color configured in the actual View.
            </remarks>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BasePopup.VerticalOptions">
            <summary>
            Gets or sets the <see cref="T:Xamarin.Forms.LayoutOptions"/> for positioning the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Popup"/> vertically on the screen.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BasePopup.HorizontalOptions">
            <summary>
            Gets or sets the <see cref="T:Xamarin.Forms.LayoutOptions"/> for positioning the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Popup"/> horizontally on the screen.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BasePopup.Anchor">
            <summary>
            Gets or sets the <see cref="T:Xamarin.Forms.View"/> anchor.
            </summary>
            <remarks>
            The Anchor is where the Popup will render closest to. When an Anchor is configured
            the popup will appear centered over that control or as close as possible.
            </remarks>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BasePopup.Size">
            <summary>
            Gets or sets the <see cref="P:Xamarin.CommunityToolkit.UI.Views.BasePopup.Size"/> of the Popup Display.
            </summary>
            <remarks>
            The Popup will always try to constrain the actual size of the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Popup" />
            to the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Popup" /> of the View unless a <see cref="P:Xamarin.CommunityToolkit.UI.Views.BasePopup.Size"/> is specified.
            If the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Popup" /> contains <see cref="T:Xamarin.Forms.LayoutOptions"/> a <see cref="P:Xamarin.CommunityToolkit.UI.Views.BasePopup.Size"/>
            will be required. This will allow the View to have a concept of <see cref="P:Xamarin.CommunityToolkit.UI.Views.BasePopup.Size"/>
            that varies from the actual <see cref="P:Xamarin.CommunityToolkit.UI.Views.BasePopup.Size"/> of the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Popup" />
            </remarks>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.BasePopup.IsLightDismissEnabled">
            <summary>
            Gets or sets a value indicating whether the popup can be light dismissed.
            </summary>
            <remarks>
            When true and the user taps outside of the popup it will dismiss.
            On Android - when false the hardware back button is disabled.
            </remarks>
        </member>
        <member name="E:Xamarin.CommunityToolkit.UI.Views.BasePopup.Dismissed">
            <summary>
            Dismissed event is invoked when the popup is closed.
            </summary>
        </member>
        <member name="E:Xamarin.CommunityToolkit.UI.Views.BasePopup.Opened">
            <summary>
            Opened event is invoked when the popup is opened.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.BasePopup.OnDismissed(System.Object)">
            <summary>
            Invokes the <see cref="E:Xamarin.CommunityToolkit.UI.Views.BasePopup.Dismissed"/> event.
            </summary>
            <param name="result">
            The results to add to the <see cref="T:Xamarin.CommunityToolkit.UI.Views.PopupDismissedEventArgs"/>.
            </param>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.BasePopup.OnOpened">
            <summary>
            Invokes the <see cref="E:Xamarin.CommunityToolkit.UI.Views.BasePopup.Opened"/> event.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.BasePopup.LightDismiss">
            <summary>
            Invoked when the popup is light dismissed. In other words when the
            user taps outside of the popup and it closes.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.Popup">
            <summary>
            Default popup implementation that uses a
            generic <see cref="T:System.Object"/> result.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.PopupDismissedEventArgs">
            <summary>
            Popup dismissed event arguments used when a popup is dismissed.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.PopupDismissedEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
            Initialization an instance of <see cref="T:Xamarin.CommunityToolkit.UI.Views.PopupDismissedEventArgs"/>.
            </summary>
            <param name="result">
            The result of the popup.
            </param>
            <param name="isLightDismissed">
            If the popup was dismissed via light dismiss.
            </param>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.PopupDismissedEventArgs`1">
            <summary>
            Popup dismissed event arguments used when a popup is dismissed.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.PopupDismissedEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Initialization an instance of <see cref="T:Xamarin.CommunityToolkit.UI.Views.PopupDismissedEventArgs"/>.
            </summary>
            <param name="result">
            The result of the popup.
            </param>
            <param name="isLightDismissed">
            If the popup was dismissed via light dismiss.
            </param>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.PopupDismissedEventArgs`1.Result">
            <summary>
            The resulting object to return.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.PopupDismissedEventArgs`1.IsLightDismissed">
            <summary>
            Gets if the popup was dismissed via light dismiss.
            If true, then the user tapped outside the bounds of
            the popup (a light dismiss). If false, then the
            popup was dismissed by user action or code.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.Popup`1">
            <inheritdoc/>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.Popup`1.#ctor">
            <summary>
            Initalizes a default implementation of <see cref="T:Xamarin.CommunityToolkit.UI.Views.Popup`1"/>.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.Popup`1.Reset">
            <summary>
            Resets the Popup.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.Popup`1.Dismiss(`0)">
            <summary>
            Dismiss the current popup.
            </summary>
            <param name="result">
            The result to return.
            </param>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Popup`1.Result">
            <summary>
            Gets the final result of the dismissed popup.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.Popup`1.LightDismiss">
            <inheritdoc/>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.Popup`1.GetLightDismissResult">
            <summary>
            Gets the light dismiss default result.
            </summary>
            <returns>
            The light dismiss value of <typeparamref name="T"/>
            </returns>
            <remarks>
            When a user dismisses the Popup via the light dismiss, this
            method will return a default value.
            </remarks>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.PopupOpenedEventArgs">
            <summary>
            Popup opened event arguments used when a popup is opened.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.Shield">
            <summary>
            The <see cref="T:Xamarin.CommunityToolkit.UI.Views.Shield" /> is a type of badge that has two colored sections that contain text
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Shield.SubjectProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Shield.Subject"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Shield.Subject">
            <summary>
            Text that is shown on the left side of the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Shield" />. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Shield.SubjectBackgroundColorProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Shield.SubjectBackgroundColor"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Shield.SubjectBackgroundColor">
            <summary>
            Background <see cref="T:Xamarin.Forms.Color" /> of the left side of the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Shield" />. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Shield.SubjectTextColorProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Shield.SubjectTextColor"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Shield.SubjectTextColor">
            <summary>
            Text <see cref="T:Xamarin.Forms.Color" /> of the text on the right side of the Shield
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Shield.StatusProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Shield.Status"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Shield.Status">
            <summary>
            Text that is shown on the right side of the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Shield" />. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Shield.StatusBackgroundColorProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Shield.StatusBackgroundColor"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Shield.StatusBackgroundColor">
            <summary>
            Background <see cref="T:Xamarin.Forms.Color" /> of the right side of the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Shield" />. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Shield.StatusTextColorProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Shield.StatusTextColor"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Shield.StatusTextColor">
            <summary>
            Text <see cref="T:Xamarin.Forms.Color" /> of the text on the right side of the Shield
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Shield.FontSizeProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Shield.FontSize"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Shield.FontSize">
            <summary>
            Font size of all the text on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Shield" />. <see cref="T:Xamarin.Forms.NamedSize" /> values can be used. This is a bindable preoprty.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Shield.FontFamilyProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Shield.FontFamily"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Shield.FontFamily">
            <summary>
            Font of all the text on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Shield" />. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Shield.FontAttributesProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Shield.FontAttributes"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Shield.FontAttributes">
            <summary>
            Font attributes of all the text on the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Shield" />. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Shield.CommandProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Shield.Command"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Shield.Command">
            <summary>
            Command that is triggered when the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Shield" /> is tapped. This is a bindable property.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.Shield.CommandParameterProperty">
            <summary>
            Backing BindableProperty for the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Shield.CommandParameter"/> property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Shield.CommandParameter">
            <summary>
            Parameter that is provided to the <see cref="P:Xamarin.CommunityToolkit.UI.Views.Shield.Command"/> when the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Shield" /> is tapped. This is a bindable property.
            </summary>
        </member>
        <member name="E:Xamarin.CommunityToolkit.UI.Views.Shield.Tapped">
            <summary>
            Event that is triggered when the <see cref="T:Xamarin.CommunityToolkit.UI.Views.Shield" /> is tapped. This is a bindable property.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.MessageOptions.Message">
            <summary>
            Gets or sets the message for the SnackBar.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.MessageOptions.Font">
            <summary>
            Gets or sets the font for the SnackBar message.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.MessageOptions.Foreground">
            <summary>
            Gets or sets the font color for the SnackBar message.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.MessageOptions.Padding">
            <summary>
            Gets or sets the padding for the SnackBar message.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.SnackBarActionOptions.Action">
            <summary>
            Gets or sets the action for the SnackBar action button.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.SnackBarActionOptions.Text">
            <summary>
            Gets or sets the text for the SnackBar action button.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.SnackBarActionOptions.Font">
            <summary>
            Gets or sets the font for the SnackBar action button.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.SnackBarActionOptions.BackgroundColor">
            <summary>
            Gets or sets the background color for the SnackBar action button.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.SnackBarActionOptions.ForegroundColor">
            <summary>
            Gets or sets the font color for the SnackBar action button.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.SnackBarActionOptions.Padding">
            <summary>
            Gets or sets the padding for the SnackBar message.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.SnackBarOptions.Actions">
            <summary>
            Action options
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.Options.ToastOptions">
            <summary>
            Toast options
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.ToastOptions.MessageOptions">
            <summary>
            Message options: Message, color, font
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.ToastOptions.BackgroundColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.ToastOptions.CornerRadius">
            <summary>
            Corner radius (in dp)
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.ToastOptions.IsRtl">
            <summary>
            Is Right to left
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.ToastOptions.Duration">
            <summary>
            The duration for the SnackBar.
            </summary>
        </member>
        <member name="P:Xamarin.CommunityToolkit.UI.Views.Options.ToastOptions.Result">
            <summary>
            Result is true if ActionButton is clicked.
            </summary>
        </member>
        <member name="T:Xamarin.CommunityToolkit.UI.Views.UniformGrid">
            <summary>
            The UniformGrid is just like the Grid, with the possibility of multiple rows and columns, but with one important difference:
            All rows and columns will have the same size.
            Use this when you need the Grid behavior without the need to specify different sizes for the rows and columns.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.TransitionType.Fade">
            <summary>
            The layer’s content fades as it becomes visible or hidden.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.TransitionType.MoveInFromLeft">
            <summary>
            The layer’s content slides into place over any existing content from left side.
            </summary>
        </member>
        <member name="M:Xamarin.CommunityToolkit.UI.Views.DrawingViewService.GetImageStream(System.Collections.Generic.IList{Xamarin.Forms.Point},Xamarin.Forms.Size,System.Single,Xamarin.Forms.Color,Xamarin.Forms.Color)">
            <summary>
            Get image stream from points
            </summary>
            <param name="points">Drawing points</param>
            <param name="imageSize">Image size</param>
            <param name="lineWidth">Line Width</param>
            <param name="strokeColor">Line color</param>
            <param name="backgroundColor">Image background color</param>
            <returns>Image stream</returns>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.MediaElementRenderer.NativeMethods.EXECUTION_STATE.CONTINUOUS">
            <summary>
            Informs the system that the state being set should remain in effect until the next call that uses ES_CONTINUOUS and one of the other state flags is cleared.
            </summary>
        </member>
        <member name="F:Xamarin.CommunityToolkit.UI.Views.MediaElementRenderer.NativeMethods.EXECUTION_STATE.DISPLAY_REQUIRED">
            <summary>
            Forces the display to be on by resetting the display idle timer.
            </summary>
        </member>
    </members>
</doc>
